{
  "importVueTypes": {
    "prefix": "importvt",
    "body": ["import VueTypes from 'vue-types'"],
    "description": "import VueTypes from 'vue-types'"
  },
  "vueUseInject": {
    "prefix": "vuInject",
    "body": [
      "import { computed, ref } from 'vue-demi'",
      "import { createInjectionState } from '@vueuse/shared'",
      "const [useProvideCounterStore, useCounterStore] = createInjectionState((initialValue) => {",
      "const count = ref(initialValue)",
      "const double = computed(() => count.value * 2)",
      " function increment() {count.value++}",
      "return { count, double, increment }",
      "})",
      "export { useProvideCounterStore,useCounterStore }"
    ]
  },
  "vueUseCached": {
    "prefix": "vuCache",
    "body": [
      "const source = ref({ value: 42, extra: 0 })",
      "const cached = useCached(source, (a, b) => a.value === b.value)"
    ]
  },
  "vueUseEventBus": {
    "prefix": "vuEBus",
    "body": [
      "const bus = useEventBus(\"$1:eventKey\")",
      "bus.on(()=>{})",
      "bus.emit()",
      "bus.once(()=>{})",
      "bus.reset()"
    ]
  },
  "vueUseListener": {
    "prefix": "vuListener",
    "body": ["useEventListener(document, 'visibilitychange', (evt) => { console.log(evt) })"]
  },
  "vueUseIntersectionObserver": {
    "prefix": "vuIntersectionObserver",
    "body": [
      "const target = ref(null)",
      "const targetIsVisible = ref(false)",
      " const { stop } = useIntersectionObserver(target,",
      "([{ isIntersecting }], observerElement) => {",
      "targetIsVisible.value = isIntersecting })"
    ]
  },
  "vueUseKeyModifier": {
    "prefix": "vuKeyModifier",
    "body": [
      "const capsLockState = useKeyModifier('CapsLock', { events: ['mouseup', 'mousedown'] })",
      "console.log(capsLockState)"
    ]
  },
  "vueUseMagicKeys": {
    "prefix": "vuMagicKeys",
    "body": [
      "const { shift, space, a /* keys you want to monitor */ } = useMagicKeys()",
      "watch(space, (v) => {if (v) console.log('space has been pressed')})"
    ]
  },
  "vueUseRefHistory": {
    "prefix": "vuRefHistory",
    "body": [
      "const counter = ref(0)",
      "const { history, commit, undo, redo } = useManualRefHistory(counter)"
    ]
  },
  "vueUseStore": {
    "prefix": "vuStore",
    "body": [
      "const state = useStorage('my-store', { hello: 'hi', greeting: 'Hello' })",
      "state.value = null",
      "const state = useStorage('my-store', { hello: 'hi', greeting: 'hello' }, localStorage)"
    ]
  },
  "vueUseModel": {
    "prefix": "vuModel",
    "body": [" const data = useVModel(props, 'data', emit)"]
  },
  "vueUseModels": {
    "prefix": "vuModels",
    "body": [" const { foo, bar } = useVModels(props, emit)"]
  },
  "vueUseCookies": {
    "prefix": "vuCookies",
    "body": [
      "const cookies = useCookies(['locale'])",
      "cookies.get('locale') ",
      "cookies.set('locale','cn') "
    ]
  },
  "vueUseFuse": {
    "prefix": "vuFuse",
    "body": [
      "import { useFuse } from '@vueuse/integrations/useFuse'",
      "const data = ['John Smith','John Doe','Jane Doe' ]",
      "const input = ref('Jhon D')",
      "const { results } = useFuse(input, data)"
    ]
  },
  "vueUseGlobalState": {
    "prefix": "vuGlobalState",
    "body": [
      "import { createGlobalState, useStorage } from '@vueuse/core'",
      "export const useGlobalState = createGlobalState(",
      "() => useStorage('vueuse-local-storage', 'initialValue'))"
    ]
  },
  "vueUseReactiveComputed": {
    "prefix": "vuReactiveComputed",
    "body": ["const state = reactiveComputed(() => {return {foo: 'bar',bar: 'baz',}})"]
  },
  "vueUseReactiveOmit": {
    "prefix": "vuReactiveOmit",
    "body": ["const childProps = reactiveOmit(props, 'value')"]
  },
  "vueUseReactivePick": {
    "prefix": "vuReactivePick",
    "body": ["const childProps = reactivePick(props, 'color', 'font')"]
  },
  "vueUseRefDefault": {
    "prefix": "vurefdefault",
    "body": ["const raw = useStorage('key')", "const state = refDefault(raw, 'default')"]
  },
  "vueUseTimeout": {
    "prefix": "vuTimeout",
    "body": ["const { isPending, start, stop } = useTimeoutFn(() => {/* ... */}, 3000)"]
  },
  "vueUseDebounce": {
    "prefix": "vuDebounce",
    "body": ["const debouncedFn = useDebounceFn(() => {/* ... */}, 1000, { maxWait: 5000 })"]
  },
  "vueUseuseThrottle": {
    "prefix": "useThrottleFn",
    "body": ["const throttledFn = useThrottleFn(() => { /* ... */}, 1000)"]
  },
  "vueWatchArray": {
    "prefix": "vuWatchArray",
    "body": [
      "watchArray(list, (newList, oldList, added, removed) => {console.log(newList); console.log(oldList); /* [1, 2, 3]*/ ",
      "console.log(added) // [4]",
      "console.log(removed) // []",
      "})"
    ]
  },
  "vueWatchDebounce": {
    "prefix": "vuWatchDebounce",
    "body": [
      "watchDebounced(source,() => { console.log('changed!') },{ debounce: 500, maxWait: 1000 })"
    ]
  },
  "vueWatchWithFilter": {
    "prefix": "vuwatchWithFilter",
    "body": [
      "watchWithFilter(source,() => { console.log('changed!') }, ",
      "{eventFilter: debounceFilter(500),",
      "// throttledFilter, pausabledFilter or custom filters",
      "},)"
    ]
  },
  "vueToReactive": {
    "prefix": "vueToReactive",
    "body": ["const refState = ref({ foo: 'bar' })", "const state = toReactive(refState) "]
  },
  "vueUseTimeFormat": {
    "prefix": "vuTimeFormat",
    "body": ["const formatted = useDateFormat(useNow(), 'YYYY-MM-DD HH:mm:ss')"]
  },
  "vueUseDateFormat": {
    "prefix": "vuDateFormat",
    "body": [
      "import { formatDate, normalizeDate } from '@vueuse/core'",
      "const formatted=formatDate(normalizeDate(time),'YYYY-MM-DD HH:mm:ss')"
    ]
  },
  "vueUseWatchPause": {
    "prefix": "vuWatchPause",
    "body": [
      "const watcher = watchPausable(source,v => (log.value += `Changed to '${v}'`),)",
      "watcher.pause()",
      "watcher.resume()"
    ]
  },
  "vueUseWatchOnce": {
    "prefix": "vuWatchOnce",
    "body": ["watchOnce(source, () => { console.log('source changed!')})"]
  },
  "vueUseWhenever": {
    "prefix": "vuWhenever",
    "body": ["whenever(() => counter.value === 7,() => console.log('counter is 7 now!'),)"]
  },
  "vueNullishCheck": {
    "prefix": "vuNullishCheck",
    "body": ["if (isDefined(example))"]
  },
  "vueUseComputedAsync": {
    "prefix": "vuComputedAsync",
    "body": [
      "const userInfo = computedAsync(",
      "async () => { return await mockLookUp(name.value) }, null, )"
    ]
  },
  "vueUseRafFn": {
    "prefix": "vuUseRafFn",
    "body": [
      "const { pause, resume } = useRafFn(() => {",
      "count.value++; console.log(count.value);})"
    ]
  },
  "vueUseChangeCase": {
    "prefix": "vuChangeCase",
    "body": [
      "const changeCase = useChangeCase('hello world', 'camelCase')",
      "const arr = ['camelCase','capitalCase','constantCase','dotCase','headerCase', 'noCase','paramCase', 'pascalCase','pathCase','sentenceCase','snakeCase']"
    ]
  },
  "vueUseAsyncValidator": {
    "prefix": "vuAsyncValidator",
    "body": [
      "const form = reactive({ email: '', name: '', age: '' })",
      "const rules = {name: { type: 'string',min: 5, max: 20,required: true},age: {type: 'number',required: true}}",
      "const { pass, isFinished, errorFields } = useAsyncValidator(form, rules)"
    ]
  },
  "vueUseBreakpoints": {
    "prefix": "vuBreakpoints",
    "body": [
      "import { breakpointsTailwind, useBreakpoints } from '@vueuse/core'",
      "const breakpoints = useBreakpoints(breakpointsTailwind)",
      "const sm = breakpoints.smaller('sm')",
      "const md = breakpoints.between('sm', 'md')",
      "const lg = breakpoints.between('md', 'lg')"
    ]
  },
  "vueUseCycleList": {
    "prefix": "vuCycleList",
    "body": [
      "import { useCycleList } from '@vueuse/core'",
      "const list = ['Dog', 'Cat','Lizard','Shark']",
      "const { state, next, prev } = useCycleList(list)"
    ]
  },
  "vueUseFileDialog": {
    "prefix": "vuFileDialog",
    "body": [
      "import { useFileDialog } from '@vueuse/core'",
      "const { files, open, reset } = useFileDialog()"
    ]
  },
  "vueUseWatchTriggerable": {
    "prefix": "vuwatchTriggerable",
    "body": [
      "const source = ref(0)",
      "const { trigger, ignoreUpdates } = watchTriggerable(source,v => console.log(`Changed to ${v}!`),)",
      "source.value = 'bar'",
      "await nextTick()",
      "trigger() // logs: Changed to bar!"
    ]
  },
  "vueUseusePrecision": {
    "prefix": "vuPrecision",
    "body": [
      "const value = ref(3.1415)",
      "const result = usePrecision(value, 2) // 3.14",
      "const ceilResult = usePrecision(value, 2, {math: 'ceil'})"
    ]
  },
  "vueUseToNumber": {
    "prefix": "vuToNumber",
    "body": ["const str = ref('123')", "const number = useToNumber(str)"]
  },
  "vueUseCloned": {
    "prefix": "vuCloned",
    "body": ["const original = ref({ key: 'value' })", "const { cloned } = useCloned(original)"]
  },
  "vueUseElementHover": {
    "prefix": "vuElementHover",
    "body": [
      "const myHoverableElement = ref()",
      "const isHovered = useElementHover(myHoverableElement)"
    ]
  },
  "vueUseClipboard": {
    "prefix": "vuseClipboard",
    "body": [
        "",
        "const input = ref('')",
        "",
        "const { text, isSupported, copy } = useClipboard()",
        "const permissionRead = usePermission('clipboard-read')",
        "const permissionWrite = usePermission('clipboard-write')"
    ]
   },
   "vueUsefocusTrap": {
    "prefix": "vuseForcusTrap",
    "body": [
        "const target = ref()",
        "const { hasFocus, activate, deactivate } = useFocusTrap(target, { immediate: true })"
    ]
   },
   "vuseWebSocket": {
    "prefix": "vuseWebSock",
    "body": [
        "import { useWebSocket } from '@vueuse/core'",
        "",
        "const { status, data, send, open, close } = useWebSocket('ws://websocketurl', {",
        "  protocols: ['soap'], // ['soap', 'wamp']",
        "})"
    ]
  },
  "vuseClickOutside": {
    "prefix": "vuseOutside",
    "body": [
        "\tconst target = ref(null)",
        "",
        "\tonClickOutside(target, (event) => console.log(event))"
    ]
  },
  "vuseStepper": {
    "prefix": "vuseStepper",
    "body": [
        "\tconst {",
        "\t  steps,",
        "\t  stepNames,",
        "\t  index,",
        "\t  current,",
        "\t  next,",
        "\t  previous,",
        "\t  isFirst,",
        "\t  isLast,",
        "\t  goTo,",
        "\t  goNext,",
        "\t  goPrevious,",
        "\t  goBackTo,",
        "\t  isNext,",
        "\t  isPrevious,",
        "\t  isCurrent,",
        "\t  isBefore,",
        "\t  isAfter",
        "\t} = useStepper(['billing-address', 'terms', 'payment'])",
        "",
        "\t// Access the step through `current`",
        "\tconsole.log(current.value) // 'billing-address'"
    ]
  },
  "vusePage": {
    "prefix": "vusePage",
    "body": [
        "function fetchData({ currentPage, currentPageSize }: { currentPage: number; currentPageSize: number }) {",
        "  fetch(currentPage, currentPageSize).then((responseData) => {",
        "\tdata.value = responseData",
        "  })",
        "}",
        "",
        "const {",
        "  currentPage,",
        "  currentPageSize,",
        "  pageCount,",
        "  isFirstPage,",
        "  isLastPage,",
        "  prev,",
        "  next,",
        "} = useOffsetPagination({",
        "  total: database.value.length,",
        "  page: 1,",
        "  pageSize,",
        "  onPageChange: fetchData,",
        "  onPageSizeChange: fetchData,",
        "})",
        ""
    ]
  },
  "vuseMagicKeys": {
    "prefix": "vuseMagicKeys",
    "body": [
        "import { useMagicKeys } from '@vueuse/core'",
        "",
        "const keys = useMagicKeys()",
        "const shiftCtrlA = keys['Shift+Ctrl+A']",
        "",
        "watch(shiftCtrlA, (v) => {",
        "  if (v)",
        "\tconsole.log('Shift + Ctrl + A have been pressed')",
        "})"
    ]
  },
  "vuseKeyModifier": {
    "prefix": "vuseKeyModifier",
    "body": [
        "import { useKeyModifier } from '@vueuse/core'",
        "",
        "const capsLockState = useKeyModifier('CapsLock')",
        "",
        "console.log(capsLockState.value)"
    ]
  },
  "vuseIdle": {
    "prefix": "vuseIdle",
    "body": [
        "const { idle, lastActive } = useIdle(5 * 60 * 1000) // 5 min",
        "",
        "console.log(idle.value) /"
    ]
  },
  "vuseFullScreen": {
    "prefix": "vuseFullScreen",
    "body": [
        "",
        "const { isFullscreen, enter, exit, toggle } = useFullscreen(el)"
    ]
  },
  "vuseMouseInElement": {
    "prefix": "vuseMouseInElement",
    "body": [
        "\tconst target = ref(null)",
        "",
        "\tconst { x, y, isOutside } = useMouseInElement(target)",
        "",
        "\treturn { x, y, isOutside }"
    ]
 },
 "vuseWebWorkerFn": {
  "prefix": "vuseWebWorkerFn",
  "body": [
      "const { workerFn, workerStatus, workerTerminate } = useWebWorkerFn(",
      "  dates => dates.sort(dateFns.compareAsc),",
      "  {",
      "\ttimeout: 50000,",
      "\tdependencies: [",
      "\t  'https://cdnjs.cloudflare.com/ajax/libs/date-fns/1.30.1/date_fns.js', // dateFns",
      "\t],",
      "  },",
      ")"
  ]
 },
 "vuseScriptTag": {
  "prefix": "vuseScriptTag",
  "body": [
      "useScriptTag(",
      "  'https://player.twitch.tv/js/embed/v1.js',",
      "  // on script tag loaded.",
      "  (el: HTMLScriptElement) => {",
      "\t// do something",
      "  },",
      ")"
  ]
 },
 "excludeModules": {
  "prefix": "excludeModule",
  "body": [
      "import { APP_CONFIG } from '@/utils/setting'",
      "",
      "function check(el, binding) {",
      "  if (!APP_CONFIG.excludeModules.includes(binding.value)) return",
      "  if (el.parentNode) {",
      "\tel.parentNode.removeChild(el)",
      "  }",
      "}",
      "",
      "export function setupExcludModules(app) {",
      "  app.directive('excludeModules', {",
      "\tupdate: function(el, binding) {",
      "\t  check(el, binding)",
      "\t},",
      "\tinserted: function(el, binding) {",
      "\t  check(el, binding)",
      "\t}",
      "  })",
      "}",
      ""
  ]
 }
}
