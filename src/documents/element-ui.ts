export default {"el-alert":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/alert](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/alert) \n     \n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| title     | 标题           | string | — | — |\n| type | 主题 | string | success/warning/info/error | info |\n| description | 辅助性文字。也可通过默认 slot 传入 | string | — | — |\n| closable | 是否可关闭 | boolean | — | true |\n| center | 文字是否居中 | boolean | — | true |\n| close-text | 关闭按钮自定义文本 | string | — | — |\n| show-icon | 是否显示图标 | boolean | — | false |\n\n### Slot\n\n| Name | Description |\n|------|--------|\n| — | 描述 |\n| title | 标题的内容 |\n\n### Events\n| 事件名称 | 说明 | 回调参数 |\n|---------- |-------- |---------- |\n| close | 关闭alert时触发的事件 | — |\n","el-avatar":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/avatar](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/avatar) \n     \n\n| 参数              | 说明                             | 类型            | 可选值 | 默认值 |\n| ----------------- | -------------------------------- | --------------- | ------ | ------ |\n| icon              | 设置头像的图标类型，参考 Icon 组件   | string          |        |        |\n| size              | 设置头像的大小                     | number/string | number / large / medium / small | large  |\n| shape             | 设置头像的形状  | string |    circle / square     |   circle  |\n| src               | 图片头像的资源地址 | string |        |      |\n| srcSet            | 以逗号分隔的一个或多个字符串列表表明一系列用户代理使用的可能的图像 | string |        |      |\n| alt               | 描述图像的替换文本 | string |        |      |\n| fit               | 当展示类型为图片的时候，设置图片如何适应容器框 | string |    fill / contain / cover / none / scale-down    |   cover   |\n\n\n### Events\n\n| 事件名 | 说明               | 回调参数 |\n| ------ | ------------------ | -------- |\n| error  | 图片类头像加载失败的回调， 返回 false 会关闭组件默认的 fallback 行为 |(e: Event)  |\n\n### Slot\n\n| 名称\t | 说明               |  \n| ------ | ------------------ | \n| default  | 自定义头像展示内容 |\n","el-backtop":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/backtop](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/backtop) \n     \n\n| 参数              | 说明                             | 类型            | 可选值 | 默认值 |\n| ----------------- | -------------------------------- | --------------- | ------ | ------ |\n| target            | 触发滚动的对象                   | string          |        |        |\n| visibility-height | 滚动高度达到此参数值才出现       | number |        | 200    |\n| right             | 控制其显示位置, 距离页面右边距   | number |        | 40     |\n| bottom            | 控制其显示位置, 距离页面底部距离 | number |        | 40     |\n\n### Events\n\n| 事件名 | 说明               | 回调参数 |\n| ------ | ------------------ | -------- |\n| click  | 点击按钮触发的事件 | 点击事件 |\n","el-badge":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/badge](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/badge) \n     \n| 参数          | 说明            | 类型            | 可选值                 | 默认值   |\n|------------- |---------------- |---------------- |---------------------- |-------- |\n| value        | 显示值           | string, number  |          —            |    —    |\n| max          | 最大值，超过最大值会显示 '{max}+'，要求 value 是 Number 类型    | number  |         —              |     —    |\n| is-dot       | 小圆点           | boolean         |         —             |  false  |\n| hidden       | 隐藏 badge       | boolean         |         —             |  false  |\n| type         | 类型             | string          | primary / success / warning / danger / info |    —    |\n","el-border":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/border](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/border) \n       import bus from '../../bus';\n  import { ACTION_USER_CONFIG_UPDATE } from '../../components/theme/constant.js';\n  const varMap = {\n    '$--box-shadow-light': 'boxShadowLight',\n    '$--box-shadow-base': 'boxShadowBase',\n    '$--border-radius-base': 'borderRadiusBase',\n    '$--border-radius-small': 'borderRadiusSmall'\n  };\n  const original = {\n    boxShadowLight: '0 2px 12px 0 rgba(0, 0, 0, 0.1)',\n    boxShadowBase: '0 2px 4px rgba(0, 0, 0, .12), 0 0 6px rgba(0, 0, 0, .04)',\n    borderRadiusBase: '4px',\n    borderRadiusSmall: '2px'\n  }\n  export default {\n    created() {\n      bus.$on(ACTION_USER_CONFIG_UPDATE, this.setGlobal);\n    },\n    mounted() {\n      this.setGlobal();\n    },\n    methods: {\n      setGlobal() {\n        if (window.userThemeConfig) {\n          this.global = window.userThemeConfig.global;\n        }\n      }\n    },\n    data() {\n      return {\n        global: {},\n        boxShadowLight: '',\n        boxShadowBase: '',\n        borderRadiusBase: '',\n        borderRadiusSmall: ''\n      }\n    },\n    watch: {\n      global: {\n        immediate: true,\n        handler(value) {\n          Object.keys(varMap).forEach((c) => {\n            if (value[c]) {\n              this[varMap[c]] = value[c]\n            } else {\n              this[varMap[c]] = original[varMap[c]]\n            }\n          });\n        }\n      }\n    }\n  }\n</script>\n\n## Border 边框\n\n我们对边框进行统一规范，可用于按钮、卡片、弹窗等组件里。\n\n### 边框\n\n我们提供了以下几种边框样式，以供选择。\n\n<table class=\"demo-border\">\n  <tbody>\n    <tr>\n      <td class=\"text\">名称</td>\n      <td class=\"text\">粗细</td>\n      <td class=\"line\">举例</td>\n    </tr>\n    <tr>\n      <td class=\"text\">\b实线</td>\n      <td class=\"text\">1px</td>\n      <td class=\"line\">\n        <div></div>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"text\">\b虚线</td>\n      <td class=\"text\">2px</td>\n      <td class=\"line\">\n        <div class=\"dashed\"></div>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n### 圆角\n\n我们提供了以下几种圆角样式，以供选择。\n\n<el-row :gutter=\"12\" class=\"demo-radius\">\n  <el-col :span=\"6\" :xs=\"{span: 12}\">\n    <div class=\"title\">无圆角</div>\n    <div class=\"value\">border-radius: 0px</div>\n    <div class=\"radius\"></div>\n  </el-col>\n  <el-col :span=\"6\" :xs=\"{span: 12}\">\n    <div class=\"title\">小圆角</div>\n    <div class=\"value\">border-radius: {{borderRadiusSmall}}</div>\n    <div \n      class=\"radius\" \n      :style=\"{ borderRadius: borderRadiusSmall }\"\n    ></div>\n  </el-col>\n  <el-col :span=\"6\" :xs=\"{span: 12}\">\n    <div class=\"title\">大圆角</div>\n    <div class=\"value\">border-radius: {{borderRadiusBase}}</div>\n    <div \n      class=\"radius\"\n      :style=\"{ borderRadius: borderRadiusBase }\"\n    ></div>\n  </el-col>\n  <el-col :span=\"6\" :xs=\"{span: 12}\">\n    <div class=\"title\">圆形圆角</div>\n    <div class=\"value\">border-radius: 30px</div>\n    <div class=\"radius radius-30\"></div>\n  </el-col>\n</el-row>\n\n### 投影\n\n我们提供了以下几种投影样式，以供选择。\n\n<div \nclass=\"demo-shadow\"\n:style=\"{ boxShadow: boxShadowBase }\"\n></div>\n<span class=\"demo-shadow-text\">基础投影 box-shadow: {{boxShadowBase}}</span>\n\n<div \nclass=\"demo-shadow\"\n:style=\"{ boxShadow: boxShadowLight }\"\n></div>\n<span class=\"demo-shadow-text\">浅色投影 box-shadow: {{boxShadowLight}}</span>\n","el-breadcrumb":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/breadcrumb](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/breadcrumb) \n     \n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| separator | 分隔符 | string | — | 斜杠'/' |\n| separator-class | 图标分隔符 class | string | — | - |\n\n### Breadcrumb Item Attributes\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| to        | 路由跳转对象，同 `vue-router` 的 `to` | string/object | — | — |\n| replace   | 在使用 to 进行路由跳转时，启用 replace 将不会向 history 添加新记录 | boolean | — | false |\n","el-breadcrumb-item":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/breadcrumb#breadcrumb-item-attributes](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/breadcrumb#breadcrumb-item-attributes) \n     \n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| to        | 路由跳转对象，同 `vue-router` 的 `to` | string/object | — | — |\n| replace   | 在使用 to 进行路由跳转时，启用 replace 将不会向 history 添加新记录 | boolean | — | false |\n","el-button":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/button](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/button) \n     \n\n| 参数        | 说明           | 类型    | 可选值                                      | 默认值 |\n| ----------- | -------------- | ------- | ------------------------------------------- | ------ |\n| size        | 尺寸           | string  | large / medium / small / mini               | small  |\n| type        | 类型           | string  | primary / secondary / ghost / danger / text | —      |\n| loading     | 是否加载中状态 | boolean | —                                           | false  |\n| disabled    | 是否禁用状态   | boolean | —                                           | false  |\n| icon        | 图标类名       | string  | —                                           | —      |\n| autofocus   | 是否默认聚焦   | boolean | —                                           | false  |\n| native-type | 原生 type 属性 | string  | button / submit / reset                     | button |\n","el-calendar":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/calendar](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/calendar) \n     \n| 参数             | 说明          | 类型      | 可选值        | 默认值  |\n|-----------------|-------------- |---------- |------------ |-------- |\n| value / v-model | 绑定值         | Date/string/number | —  | —      |\n| range           | 时间范围，包括开始时间与结束时间。开始时间必须是周一，结束时间必须是周日，且时间跨度不能超过两个月。 | Array     | —           | —      |\n| first-day-of-week | 周起始日\t    | Number    | 1 到 7      |  1     |\n\n### dateCell scoped slot 参数\n| 参数             | 说明          | 类型      | 可选值        | 默认值  |\n|-----------------|-------------- |---------- |------------ |-------- |\n| date            | 单元格代表的日期 | Date      | —           | —      |\n| data            | { type, isSelected, day}，`type` 表示该日期的所属月份，可选值有 prev-month，current-month，next-month；`isSelected` 标明该日期是否被选中；`day` 是格式化的日期，格式为 yyyy-MM-dd    | Object      | —           | —      |\n","el-card":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/card](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/card) \n     \n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| header | 设置 header，也可以通过 `slot#header` 传入 DOM | string| — | — |\n| body-style | 设置 body 的样式| object| — | { padding: '20px' } |\n| shadow | 设置阴影显示时机 | string | always / hover / never | always |\n","el-carousel":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/carousel](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/carousel) \n     \n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| height | 走马灯的高度 | string | — | — |\n| initial-index | 初始状态激活的幻灯片的索引，从 0 开始 | number | — | 0 |\n| trigger | 指示器的触发方式 | string | click | — |\n| autoplay | 是否自动切换 | boolean | — | true |\n| interval | 自动切换的时间间隔，单位为毫秒 | number | — | 3000 |\n| indicator-position | 指示器的位置 | string | outside/none | — |\n| arrow | 切换箭头的显示时机 | string | always/hover/never | hover |\n| type | 走马灯的类型 | string | card | — |\n| loop | 是否循环显示 | boolean | - | true |\n| direction | 走马灯展示的方向 | string | horizontal/vertical | horizontal |\n\n### Carousel Events\n| 事件名称 | 说明 | 回调参数 |\n|---------|---------|---------|\n| change | 幻灯片切换时触发 | 目前激活的幻灯片的索引，原幻灯片的索引 |\n\n### Carousel Methods\n| 方法名      | 说明          | 参数 |\n|---------- |-------------- | -- |\n| setActiveItem | 手动切换幻灯片 | 需要切换的幻灯片的索引，从 0 开始；或相应 `el-carousel-item` 的 `name` 属性值 |\n| prev | 切换至上一张幻灯片 | — |\n| next | 切换至下一张幻灯片 | — |\n\n### Carousel-Item Attributes\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| name | 幻灯片的名字，可用作 `setActiveItem` 的参数 | string | — | — |\n| label | 该幻灯片所对应指示器的文本 | string | — | — |\n","el-carousel-item":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/carousel#carousel-item-attributes](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/carousel#carousel-item-attributes) \n     \n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| name | 幻灯片的名字，可用作 `setActiveItem` 的参数 | string | — | — |\n| label | 该幻灯片所对应指示器的文本 | string | — | — |\n","el-cascader":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/cascader](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/cascader) \n     \n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| value / v-model | 选中项绑定值 | - | — | — |\n| options | 可选项数据源，键名可通过 `Props` 属性配置 | array | — | — |\n| props | 配置选项，具体见下表 | object | — | — |\n| size | 尺寸 | string | medium / small / mini | — |\n| placeholder | 输入框占位文本 | string | — | 请选择 |\n| disabled | 是否禁用 | boolean | — | false |\n| clearable | 是否支持清空选项 | boolean | — | false |\n| show-all-levels | 输入框中是否显示选中值的完整路径 | boolean | — | true |\n| collapse-tags | 多选模式下是否折叠Tag | boolean | - | false |\n| separator | 选项分隔符 | string | — | 斜杠' / ' |\n| filterable | 是否可搜索选项 | boolean | — | — |\n| filter-method | 自定义搜索逻辑，第一个参数是节点`node`，第二个参数是搜索关键词`keyword`，通过返回布尔值表示是否命中 | function(node, keyword) | - | - |\n| debounce | 搜索关键词输入的去抖延迟，毫秒 | number | — | 300 |\n| before-filter | 筛选之前的钩子，参数为输入的值，若返回 false 或者返回 Promise 且被 reject，则停止筛选 | function(value) | — | — |\n| popper-class | 自定义浮层类名   | string | —  | — |\n\n### Cascader Events\n| 事件名称      | 说明    | 回调参数      |\n|---------- |-------- |---------- |\n| change | 当选中节点变化时触发 | 选中节点的值 |\n| expand-change | 当展开节点发生变化时触发 | 各父级选项值组成的数组 |\n| blur | 当失去焦点时触发 | (event: Event) |\n| focus | 当获得焦点时触发 | (event: Event) |\n| visible-change | 下拉框出现/隐藏时触发 | 出现则为 true，隐藏则为 false |\n| remove-tag | 在多选模式下，移除Tag时触发 | 移除的Tag对应的节点的值 |\n\n### Cascader Methods\n| 方法名 | 说明 | 参数 |\n| ---- | ---- | ---- |\n| getCheckedNodes | 获取选中的节点 | (leafOnly) 是否只是叶子节点，默认值为 `false` |\n\n### Cascader Slots\n| 名称     | 说明 |\n|---------|-------------|\n| - | 自定义备选项的节点内容，参数为 { node, data }，分别为当前节点的 Node 对象和数据 |\n| empty  | 无匹配选项时的内容 |\n\n### CascaderPanel Attributes\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| value / v-model | 选中项绑定值 | - | — | — |\n| options | 可选项数据源，键名可通过 `Props` 属性配置 | array | — | — |\n| props | 配置选项，具体见下表 | object | — | — |\n\n### CascaderPanel Events\n| 事件名称      | 说明    | 回调参数      |\n|---------- |-------- |---------- |\n| change | 当选中节点变化时触发 | 选中节点的值 |\n| expand-change | 当展开节点发生变化时触发 | 各父级选项值组成的数组 |\n\n### CascaderPanel Methods\n| 方法名 | 说明 | 参数 |\n| ---- | ---- | ---- |\n| getCheckedNodes | 获取选中的节点数组 | (leafOnly) 是否只是叶子节点，默认值为 `false` |\n| clearCheckedNodes | 清空选中的节点 | - |\n\n### CascaderPanel Slots\n| 名称     | 说明 |\n|---------|-------------|\n| - | 自定义备选项的节点内容，参数为 { node, data }，分别为当前节点的 Node 对象和数据 |\n\n### Props\n| 参数     | 说明              | 类型   | 可选值 | 默认值 |\n| -------- | ----------------- | ------ | ------ | ------ |\n| expandTrigger | 次级菜单的展开方式 | string | click / hover | 'click' |\n| multiple | 是否多选 | boolean | - | false |\n| checkStrictly | 是否严格的遵守父子节点不互相关联 | boolean | - | false |\n| emitPath | 在选中节点改变时，是否返回由该节点所在的各级菜单的值所组成的数组，若设置 false，则只返回该节点的值 | boolean | - | true |\n| lazy | 是否动态加载子节点，需与 lazyLoad 方法结合使用 | boolean | - | false |\n| lazyLoad | 加载动态数据的方法，仅在 lazy 为 true 时有效 | function(node, resolve)，`node`为当前点击的节点，`resolve`为数据加载完成的回调(必须调用) | - | - |\n| value    | 指定选项的值为选项对象的某个属性值 | string | — | 'value' |\n| label    | 指定选项标签为选项对象的某个属性值 | string | — | 'label' |\n| children | 指定选项的子选项为选项对象的某个属性值 | string | — | 'children' |\n| disabled | 指定选项的禁用为选项对象的某个属性值 | string | — | 'disabled' |\n| leaf     | 指定选项的叶子节点的标志位为选项对象的某个属性值 | string | — | 'leaf' |\n","el-checkbox":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/checkbox](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/checkbox) \n     \n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| value / v-model | 绑定值 | string / number / boolean | — | — |\n| label     | 选中状态的值（只有在`checkbox-group`或者绑定对象类型为`array`时有效）| string / number / boolean  |       —        |     —    |\n| true-label | 选中时的值   | string / number | — |     —    |\n| false-label | 没有选中时的值   | string / number    |      —         |     —    |\n| disabled  | 是否禁用    | boolean   |  — | false   |\n| name | 原生 name 属性 | string    |      —         |     —    |\n| checked  | 当前是否勾选    | boolean   |  — | false   |\n| indeterminate  | 设置 indeterminate 状态，只负责样式控制    | boolean   |  — | false   |\n\n### Checkbox Events\n| 事件名称      | 说明    | 回调参数      |\n|---------- |-------- |---------- |\n| change  | 当绑定值变化时触发的事件 | 更新后的值 |\n\n### Checkbox-group Attributes\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| value / v-model | 绑定值 | array | — | — |\n| disabled  | 是否禁用    | boolean   | — | false   |\n| min     | 可被勾选的 checkbox 的最小数量   | number    |       —        |     —    |\n| max     | 可被勾选的 checkbox 的最大数量   | number    |       —        |     —    |\n| text-color  | 按钮形式的 Checkbox 激活时的文本颜色    | string   | — | #ffffff   |\n| fill  | 按钮形式的 Checkbox 激活时的填充色和边框色    | string   | — | #409EFF   |\n\n### Checkbox-group Events\n| 事件名称      | 说明    | 回调参数      |\n|---------- |-------- |---------- |\n| change  | 当绑定值变化时触发的事件 | 更新后的值 |\n\n### Checkbox-button Attributes\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| label     | 选中状态的值（只有在`checkbox-group`或者绑定对象类型为`array`时有效）| string / number / boolean  |       —        |     —    |\n| true-label | 选中时的值   | string / number | — |     —    |\n| false-label | 没有选中时的值   | string / number    |      —         |     —    |\n| disabled  | 是否禁用    | boolean   |  — | false   |\n| name | 原生 name 属性 | string    |      —         |     —    |\n| checked  | 当前是否勾选    | boolean   |  — | false   |\n","el-collapse":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/collapse](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/collapse) \n     \n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| value / v-model | 当前激活的面板(如果是手风琴模式，绑定值类型需要为`string`，否则为`array`) | string / array | — | — |\n| accordion | 是否手风琴模式 | boolean | — | false |\n\n### Collapse Events\n| 事件名称 | 说明 | 回调参数 |\n|---------|---------|---------|\n| change | 当前激活面板改变时触发(如果是手风琴模式，参数 `activeNames` 类型为`string`，否则为`array`) | (activeNames: array / string) |\n\n### Collapse Item Attributes\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| name      | 唯一标志符      | string/number | —     | —    |\n| title     | 面板标题        | string        | —     | —    |\n| disabled  | 是否禁用        | boolean       | —     | —    |\n","el-collapse-item":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/collapse#collapse-item-attributes](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/collapse#collapse-item-attributes) \n     \n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| name      | 唯一标志符      | string/number | —     | —    |\n| title     | 面板标题        | string        | —     | —    |\n| disabled  | 是否禁用        | boolean       | —     | —    |\n","el-color-picker":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/color-picker](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/color-picker) \n     \n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| value / v-model | 绑定值 | string | — | — |\n| disabled | 是否禁用 | boolean | — | false |\n| size | 尺寸 | string | medium / small / mini | — |\n| show-alpha | 是否支持透明度选择 | boolean | — | false |\n| color-format | 写入 v-model 的颜色的格式 | string | hsl / hsv / hex / rgb | hex（show-alpha 为 false）/ rgb（show-alpha 为 true） |\n| popper-class | ColorPicker 下拉框的类名 | string | — | — |\n| predefine | 预定义颜色 | array | — | — |\n\n### Events\n| 事件名称      | 说明    | 回调参数      |\n|---------- |-------- |---------- |\n| change | 当绑定值变化时触发 | 当前值 |\n| active-change | 面板中当前显示的颜色发生改变时触发 | 当前显示的颜色值 |\n","el-color":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/color](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/color) \n       import bus from '../../bus';\n  import { tintColor } from '../../color.js';\n  import { ACTION_USER_CONFIG_UPDATE } from '../../components/theme/constant.js';\n  const varMap = {\n    'primary': '$--color-primary',\n    'success': '$--color-success',\n    'warning': '$--color-warning',\n    'danger': '$--color-danger',\n    'white': '$--color-white',\n    'black': '$--color-black',\n    'textPrimary': '$--color-text-primary',\n    'textRegular': '$--color-text-regular',\n    'textSecondary': '$--color-text-secondary',\n    'textPlaceholder': '$--color-text-placeholder',\n    'borderBase': '$--border-color-base',\n    'borderLight': '$--border-color-light',\n    'borderLighter': '$--border-color-lighter',\n    'borderExtraLight': '$--border-color-extra-light'\n  };\n  const original = {\n    primary: '#2C68FF',\n    primaryColors: [\n      { text: '01_背景', color: '#F2F8FF' },\n      { text: '02', color: '#C9E0FF' },\n      { text: '03_失效/禁用', color: '#A3C6FF' },\n      { text: '04_描边', color: '#7AA9FF' },\n      { text: '05_移入', color: '#548AFF' },\n      { text: '06', color: '#2C68FF' },\n      { text: '07_点击', color: '#1C4AD4' },\n      { text: '08', color: '#0D2EA6' },\n      { text: '09', color: '#051A7A' },\n      { text: '10', color: '#000B4D' }\n    ],\n    subColors: [\n      { text: 'Success', click: '#09B562', main: '#0ED57D', hover: '#37DE99', border: '#60E6B2', disabled: '#90F0CE', background: '#F2FFFB' },\n      { text: 'Warning', click: '#D47B00', main: '#FF9C00', hover: '#FFB730', border: '#FFCD61', disabled: '#FFE091', background: '#FFFCF2' },\n      { text: 'Danger', click: '#CC1D31', main: '#F52F3E', hover: '#FF576A', border: '#FF7D90', disabled: '#FFA6B6', background: '#FFF2F5' },\n    ],\n    assistColors: [\n      { text: '主要文字', color: '#000000', opacity: '85%', bg: 'rgba(0,0,0,0.85)', fontColor: '#fff' },\n      { text: '常规文字', color: '#000000', opacity: '65%', bg: 'rgba(0,0,0,0.65)',  fontColor: '#fff' },\n      { text: '次要文字', color: '#000000', opacity: '45%', bg: 'rgba(0,0,0,0.45)', fontColor: '#fff' },\n      { text: '占位文字', color: '#000000', opacity: '25%', bg: 'rgba(0,0,0,0.25)', fontColor: 'rgba(255,255,255,1)' },\n      { text: '一级边框（边框）', color: '#000000', opacity: '15%', bg: 'rgba(0,0,0,0.15)', fontColor: 'rgba(0,0,0,1)' },\n      { text: '二级边框（分割线）', color: '#000000', opacity: '10%', bg: 'rgba(0,0,0,0.1)', fontColor: 'rgba(0,0,0,1)' },\n      { text: '三级边框', color: '#000000', opacity: '6%', bg: 'rgba(0,0,0,0.06)', fontColor: 'rgba(0,0,0,1)' },\n      { text: '背景色', color: '#000000', opacity: '4%', bg: 'rgba(0,0,0,0.04)', fontColor: 'rgba(0,0,0,1)' },\n      { text: '基础黑色', color: '#000000', opacity: '100%', bg: 'rgba(0,0,0,1)', fontColor: '#fff' },\n      { text: '基础白色', color: '#FFFFFF', opacity: '100%', bg: 'rgba(255,255,255,1)', fontColor: 'rgba(0,0,0,1)', border: '1px solid #D9D9D9' },\n    ],\n    success: '#67C23A',\n    warning: '#E6A23C',\n    danger: '#F56C6C',\n    info: '#909399',\n    white: '#FFFFFF',\n    black: '#000000',\n    textPrimary: '#303133',\n    textRegular: '#606266',\n    textSecondary: '#909399',\n    textPlaceholder: '#C0C4CC',\n    borderBase: '#DCDFE6',\n    borderLight: '#E4E7ED',\n    borderLighter: '#EBEEF5',\n    borderExtraLight: '#F2F6FC'\n  }\n  export default {\n    created() {\n      bus.$on(ACTION_USER_CONFIG_UPDATE, this.setGlobal);\n    },\n    mounted() {\n      this.setGlobal();\n    },\n    methods: {\n      tintColor(color, tint) {\n        return tintColor(color, tint);\n      },\n      setGlobal() {\n        if (window.userThemeConfig) {\n          this.global = window.userThemeConfig.global;\n        }\n      }\n    },\n    data() {\n      return {\n        global: {},\n        primary: '',\n        primaryColors: [],\n        assistColors: [],\n        success: '',\n        warning: '',\n        danger: '',\n        info: '',\n        white: '',\n        black: '',\n        textPrimary: '',\n        textRegular: '',\n        textSecondary: '',\n        textPlaceholder: '',\n        borderBase: '',\n        borderLight: '',\n        borderLighter: '',\n        borderExtraLight: ''\n      }\n    },\n    watch: {\n      global: {\n        immediate: true,\n        handler(value) {\n          Object.keys(original).forEach((o) => {\n            if (value[varMap[o]]) {\n              this[o] = value[varMap[o]]\n            } else {\n              this[o] = original[o]\n            }\n          });\n        }\n      }\n    },\n  }\n</script>\n\n## Color 色彩\n\n为了避免视觉传达差异，使用一套特定的调色板来规定颜色，为你所搭建的产品提供一致的外观视觉感受。\n\n### 主色\n\n应用场景包括：关键行动点，操作状态、重要信息高亮，图形化等场景。\n\n<el-row :gutter=\"12\">\n  <el-col :span=\"24\">\n    <div class=\"demo-color-box\" :style=\"{ background: primary }\">\n      <div class=\"value_primary\">\n        <span class=\"title\">Brand Color</span>\n        {{primary}}\n      </div>\n    </div>\n  </el-col>\n</el-row>\n<el-row>\n  <el-col :span=\"24\" :xs=\"{span: 12}\">\n    <div class=\"demo-color-box line\">\n      <div\n        v-for=\"(item, key) in primaryColors\"\n        :key=\"key\"\n        :class=\"{revert: key>=5}\"\n        :style=\"{ background: item.color }\"\n      >\n        {{item.text}}\n      </div>\n    </div>\n  </el-col>\n</el-row>\n\n### 功能色\n\n功能色代表了明确的信息以及状态，比如成功、出错、失败、提醒、链接等。\n\n<el-row :gutter=\"12\">\n  <el-col :key=\"key\" :span=\"8\" :xs=\"{span: 12}\" v-for=\"(item, key) in subColors\">\n    <div class=\"demo-color-box\" :style=\"{background: item.main}\">\n      <div class=\"value\" :style=\"{background: item.click}\">\n        <span>点击</span>\n        <span>{{item.click}}</span>\n      </div>\n      <div class=\"value_main\">\n        <span class=\"title\">{{item.text}}</span>\n        <span>{{item.main}}</span>\n      </div>\n      <div class=\"value\" :style=\"{background: item.hover}\">\n        <span>移入</span>\n        <span>{{item.hover}}</span>\n      </div>\n      <div class=\"value\" :style=\"{background: item.border}\">\n        <span>描边</span>\n        <span>{{item.border}}</span>\n      </div>\n      <div class=\"value_revert\" :style=\"{background: item.disabled}\">\n        <span>失效、禁用</span>\n        <span>{{item.disabled}}</span>\n      </div>\n      <div class=\"value_revert\" :style=\"{background: item.background}\">\n        <span>背景</span>\n        <span>{{item.background}}</span>\n      </div>\n    </div>\n  </el-col>\n</el-row>\n\n### 中性色\n\n中性色包含了黑、白、灰，主要被大量的应用在界面的文字部分，此外背景、边框、分割线、等场景中也很常见。\n\n<el-row :gutter=\"12\">\n  <el-col :key=\"key\" :span=\"6\" v-for=\"(item, key) in assistColors\">\n    <div class=\"demo-color-box\" :style=\"{background: item.bg, color: item.fontColor, height: '100px', border: item.border, 'justify-content': 'flex-end'}\">\n      <div class=\"value\">\n        <span class=\"title\">{{item.text}}</span>\n      </div>\n      <div class=\"value\">\n        <span>{{item.color}}</span>\n        <span>Opacity: {{item.opacity}}</span>\n      </div>\n    </div>\n  </el-col>\n</el-row>\n","el-container":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/container](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/container) \n     \n| 参数    | 说明     | 类型    | 可选值      | 默认值 |\n|---------|----------|---------|-------------|--------|\n| direction | 子元素的排列方向 | string | horizontal / vertical | 子元素中有 `el-header` 或 `el-footer` 时为 vertical，否则为 horizontal |\n\n### Header Attributes\n| 参数    | 说明     | 类型    | 可选值      | 默认值 |\n|---------|----------|---------|-------------|--------|\n| height | 顶栏高度 | string | — | 60px |\n\n### Aside Attributes\n| 参数    | 说明     | 类型    | 可选值      | 默认值 |\n|---------|----------|---------|-------------|--------|\n| width | 侧边栏宽度 | string | — | 300px |\n\n### Footer Attributes\n| 参数    | 说明     | 类型    | 可选值      | 默认值 |\n|---------|----------|---------|-------------|--------|\n| height | 底栏高度 | string | — | 60px |","el-custom-theme":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/custom-theme](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/custom-theme) \n     Element 默认提供一套主题，CSS 命名采用 BEM 的风格，方便使用者覆盖样式。我们提供了四种方法，可以进行不同程度的样式自定义。\n\n### 主题编辑器\n使用[在线主题编辑器](./#/zh-CN/theme)，可以修改定制 Element 所有全局和组件的 Design Tokens，并可以方便地实时预览样式改变后的视觉。同时它还可以基于新的定制样式生成完整的样式文件包，供直接下载使用（关于如何使用下载的主题包，请参考本节「引入自定义主题」部分）。\n\n也可以使用[主题编辑器 Chrome 插件](https://chrome.google.com/webstore/detail/element-theme-roller/lifkjlojflekabbmlddfccdkphlelmim)，在任何使用 Element 开发的网站上配置并实时预览主题。\n\n<img src=\"https://shadow.elemecdn.com/app/sns-client/element-theme-editor2.e16c6a01-806d-11e9-bc23-21435c54c509.png\" style=\"width: 100%;margin: 30px auto 0;display: block;\">\n\n### 仅替换主题色\n如果仅希望更换 Element 的主题色，推荐使用[在线主题生成工具](https://elementui.github.io/theme-chalk-preview)。Element 默认的主题色是鲜艳、友好的蓝色。通过替换主题色，能够让 Element 的视觉更加符合具体项目的定位。\n\n使用上述工具，可以很方便地实时预览主题色改变之后的视觉，同时它还可以基于新的主题色生成完整的样式文件包，供直接下载使用（关于如何使用下载的主题包，请参考本节「引入自定义主题」和「搭配插件按需引入组件主题」部分）。\n\n### 在项目中改变 SCSS 变量\nElement 的 theme-chalk 使用 SCSS 编写，如果你的项目也使用了 SCSS，那么可以直接在项目中改变 Element 的样式变量。新建一个样式文件，例如 `element-variables.scss`，写入以下内容：\n```html\n/* 改变主题色变量 */\n$--color-primary: teal;\n\n/* 改变 icon 字体路径变量，必需 */\n$--font-path: '~element-ui/lib/theme-chalk/fonts';\n\n@import \"~element-ui/packages/theme-chalk/src/index\";\n```\n\n之后，在项目的入口文件中，直接引入以上样式文件即可（无需引入 Element 编译好的 CSS 文件）：\n```JS\nimport Vue from 'vue'\nimport Element from 'element-ui'\nimport './element-variables.scss'\n\nVue.use(Element)\n```\n\n:::tip\n需要注意的是，覆盖字体路径变量是必需的，将其赋值为 Element 中 icon 图标所在的相对路径即可。\n:::\n\n### 命令行主题工具\n如果你的项目没有使用 SCSS，那么可以使用命令行主题工具进行深层次的主题定制：\n\n#### <strong>安装工具</strong>\n首先安装「主题生成工具」，可以全局安装或者安装在当前项目下，推荐安装在项目里，方便别人 clone 项目时能直接安装依赖并启动，这里以全局安装做演示。\n```shell\nnpm i element-theme -g\n```\n\n安装白垩主题，可以从 npm 安装或者从 GitHub 拉取最新代码。\n```shell\n# 从 npm\nnpm i element-theme-chalk -D\n\n# 从 GitHub\nnpm i https://github.com/ElementUI/theme-chalk -D\n```\n\n#### <strong>初始化变量文件</strong>\n主题生成工具安装成功后，如果全局安装可以在命令行里通过 `et` 调用工具，如果安装在当前目录下，需要通过 `node_modules/.bin/et` 访问到命令。执行 `-i` 初始化变量文件。默认输出到 `element-variables.scss`，当然你可以传参数指定文件输出目录。\n\n```shell\net -i [可以自定义变量文件]\n\n> ✔ Generator variables file\n```\n\n如果使用默认配置，执行后当前目录会有一个 `element-variables.scss` 文件。内部包含了主题所用到的所有变量，它们使用 SCSS 的格式定义。大致结构如下：\n```css\n$--color-primary: #409EFF !default;\n$--color-primary-light-1: mix($--color-white, $--color-primary, 10%) !default; /* 53a8ff */\n$--color-primary-light-2: mix($--color-white, $--color-primary, 20%) !default; /* 66b1ff */\n$--color-primary-light-3: mix($--color-white, $--color-primary, 30%) !default; /* 79bbff */\n$--color-primary-light-4: mix($--color-white, $--color-primary, 40%) !default; /* 8cc5ff */\n$--color-primary-light-5: mix($--color-white, $--color-primary, 50%) !default; /* a0cfff */\n$--color-primary-light-6: mix($--color-white, $--color-primary, 60%) !default; /* b3d8ff */\n$--color-primary-light-7: mix($--color-white, $--color-primary, 70%) !default; /* c6e2ff */\n$--color-primary-light-8: mix($--color-white, $--color-primary, 80%) !default; /* d9ecff */\n$--color-primary-light-9: mix($--color-white, $--color-primary, 90%) !default; /* ecf5ff */\n\n$--color-success: #67c23a !default;\n$--color-warning: #e6a23c !default;\n$--color-danger: #f56c6c !default;\n$--color-info: #909399 !default;\n\n...\n```\n\n#### <strong>修改变量</strong>\n直接编辑 `element-variables.scss` 文件，例如修改主题色为红色。\n```CSS\n$--color-primary: red;\n```\n\n#### <strong>编译主题</strong>\n保存文件后，到命令行里执行 `et` 编译主题，如果你想启用 `watch` 模式，实时编译主题，增加 `-w` 参数；如果你在初始化时指定了自定义变量文件，则需要增加 `-c` 参数，并带上你的变量文件名。默认情况下编译的主题目录是放在 `./theme` 下，你可以通过 `-o` 参数指定打包目录。\n```shell\net\n\n> ✔ build theme font\n> ✔ build element theme\n```\n### 使用自定义主题\n#### <strong>引入自定义主题</strong>\n和引入默认主题一样，在代码里直接引用「在线主题编辑器」或「命令行工具」生成的主题的 `theme/index.css` 文件即可。\n\n```javascript\nimport '../theme/index.css'\nimport ElementUI from 'element-ui'\nimport Vue from 'vue'\n\nVue.use(ElementUI)\n```\n\n#### <strong>搭配插件按需引入组件主题</strong>\n如果是搭配 `babel-plugin-component` 一起使用，只需要修改 `.babelrc` 的配置，指定 `styleLibraryName` 路径为自定义主题相对于 `.babelrc` 的路径，注意要加 `~`。\n```json\n{\n  \"plugins\": [\n    [\n      \"component\",\n      {\n        \"libraryName\": \"element-ui\",\n        \"styleLibraryName\": \"~theme\"\n      }\n    ]\n  ]\n}\n```\n\n如果不清楚 `babel-plugin-component` 是什么，请阅读 <a href=\"./#/zh-CN/component/quickstart\">快速上手</a> 一节。更多 `element-theme` 用法请参考[项目仓库](https://github.com/ElementUI/element-theme)。","el-date-picker":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/date-picker](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/date-picker) \n     \n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| value / v-model | 绑定值 | date(DatePicker) / array(DateRangePicker) | — | — |\n| readonly | 完全只读 | boolean | — | false |\n| disabled | 禁用 | boolean | — | false |\n| editable | 文本框可输入 | boolean | — | true |\n| clearable | 是否显示清除按钮 | boolean | — | true |\n| placeholder | 非范围选择时的占位内容 | string | — | — |\n| start-placeholder | 范围选择时开始日期的占位内容 | string | — | — |\n| end-placeholder | 范围选择时结束日期的占位内容 | string | — | — |\n| type | 显示类型 | string | year/quarter/month/date/dates/ week/datetime/yearrange/datetimerange/ daterange/monthrange/quarterrange | date |\n| format | 显示在输入框中的格式 | string | 见[日期格式](#/zh-CN/component/date-picker#ri-qi-ge-shi) | yyyy-MM-dd |\n| align | 对齐方式 | string | left, center, right | left |\n| popper-class | DatePicker 下拉框的类名 | string | — | — |\n| picker-options | 当前时间日期选择器特有的选项参考下表 | object |  — | {} |\n| range-separator | 选择范围时的分隔符 | string | — | '-' |\n| default-value | 可选，选择器打开时默认显示的时间 | Date | 可被`new Date()`解析 | — |\n| default-time | 范围选择时选中日期所使用的当日内具体时刻 | string[] | 数组，长度为 2，每项值为字符串，形如`12:00:00`，第一项指定开始日期的时刻，第二项指定结束日期的时刻，不指定会使用时刻 `00:00:00` | — |\n| value-format | 可选，绑定值的格式。不指定则绑定值为 Date 对象 | string | 见[日期格式](#/zh-CN/component/date-picker#ri-qi-ge-shi) | — |\n| name | 原生属性 | string | — | — |\n| unlink-panels | 在范围选择器里取消两个日期面板之间的联动 | boolean | — | false |\n| prefix-icon | 自定义头部图标的类名 | string | — | el-icon-date |\n| clear-icon | 自定义清空图标的类名 | string | — | el-icon-circle-close |\n| validate-event | 输入时是否触发表单的校验 | boolean | - | true |\n\n### Picker Options\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| shortcuts | 设置快捷选项，需要传入 { text, onClick } 对象用法参考 demo 或下表 | Object[] | — | — |\n| disabledDate | 设置禁用状态，参数为当前日期，要求返回 Boolean | Function | — | — |\n| cellClassName | 设置日期的 className | Function(Date) | — | — |\n| firstDayOfWeek | 周起始日 | Number | 1 到 7 | 7 |\n| onPick | 选中日期后会执行的回调，只有当 `daterange` 或 `datetimerange` 才生效 | Function({ maxDate, minDate }) | — | — |\n\n### Shortcuts\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| text | 标题文本 | string | — | — |\n| onClick | 选中后的回调函数，参数是 vm，可通过触发 'pick' 事件设置选择器的值。例如 vm.$emit('pick', new Date()) | function | — | — |\n\n### Events\n| 事件名称      | 说明    | 回调参数      |\n|---------|--------|---------|\n| change | 用户确认选定的值时触发 | 组件绑定值。格式与绑定值一致，可受 `value-format` 控制 |\n| blur | 当 input 失去焦点时触发 | 组件实例 |\n| focus | 当 input 获得焦点时触发 | 组件实例 |\n\n### Methods\n| 方法名 | 说明 | 参数 |\n| ---- | ---- | ---- |\n| focus | 使 input 获取焦点 | — |\n","el-descriptions":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/descriptions](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/descriptions) \n     \n| 参数          | 说明            | 类型            | 可选值                 | 默认值   |\n|-------------  |---------------- |---------------- |---------------------- |-------- |\n| border        | 是否带有边框         | boolean  |          —             |    false     |\n| column        | 一行 `Descriptions Item` 的数量  | number | — |    3  |\n| direction     | 排列的方向  | string | vertical / horizontal |    horizontal  |\n| size          | 列表的尺寸    | string  |    medium / small / mini  |  — |\n| title         | 标题文本，显示在左上方    | string  |    —  |  — |\n| extra         | 操作区文本，显示在右上方    | string  |    —  |  — |\n| colon         | 是否显示冒号    | boolean  |    —  |  true |\n| labelClassName | 自定义标签类名    | string |    —  |  — |\n| contentClassName | 自定义内容类名    | string |    —  | — |\n| labelStyle | 自定义标签样式 | object |    —  | — |\n| contentStyle | 自定义内容样式    | object |    —  | — |\n\n### Descriptions Slots\n\n| Name | 说明 |\n|------|--------|\n| title | 自定义标题，显示在左上方  |\n| extra | 自定义操作区，显示在右上方  |\n\n### Descriptions Item Attributes\n| 参数          | 说明            | 类型            | 可选值                 | 默认值   |\n|-------------  |---------------- |---------------- |---------------------- |-------- |\n| label          | 标签文本         | string  |          —             |    —     |\n| span          | 列的数量         | number  |          —             |    1     |\n| labelClassName | 自定义标签类名    | string |    —  |  — |\n| contentClassName | 自定义内容类名    | string |    —  | — |\n| labelStyle | 自定义标签样式 | object |    —  | — |\n| contentStyle | 自定义内容样式    | object |    —  | — |\n\n### Descriptions Item Slots\n\n| Name | 说明 |\n|------|--------|\n| label | 自定义标签文本  |\n","el-descriptions-item":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/descriptions#descriptions-item-attributes](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/descriptions#descriptions-item-attributes) \n     \n| 参数          | 说明            | 类型            | 可选值                 | 默认值   |\n|-------------  |---------------- |---------------- |---------------------- |-------- |\n| label          | 标签文本         | string  |          —             |    —     |\n| span          | 列的数量         | number  |          —             |    1     |\n| labelClassName | 自定义标签类名    | string |    —  |  — |\n| contentClassName | 自定义内容类名    | string |    —  | — |\n| labelStyle | 自定义标签样式 | object |    —  | — |\n| contentStyle | 自定义内容样式    | object |    —  | — |\n\n### Descriptions Item Slots\n\n| Name | 说明 |\n|------|--------|\n| label | 自定义标签文本  |\n","el-dialog":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/dialog](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/dialog) \n     \n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| visible   | 是否显示 Dialog，支持 .sync 修饰符 | boolean | — | false |\n| title     | Dialog 的标题，也可通过具名 slot （见下表）传入 | string    | — | — |\n| width     | Dialog 的宽度 | string    | — | 50% |\n| fullscreen     | 是否为全屏 Dialog | boolean    | — | false |\n| top       | Dialog CSS 中的 margin-top 值 | string | — | 15vh |\n| modal     | 是否需要遮罩层   | boolean   | — | true |\n| modal-append-to-body     | 遮罩层是否插入至 body 元素上，若为 false，则遮罩层会插入至 Dialog 的父元素上   | boolean   | — | true |\n| append-to-body     | Dialog 自身是否插入至 body 元素上。嵌套的 Dialog 必须指定该属性并赋值为 true   | boolean   | — | false |\n| lock-scroll | 是否在 Dialog 出现时将 body 滚动锁定 | boolean | — | true |\n| custom-class      | Dialog 的自定义类名 | string    | — | — |\n| close-on-click-modal | 是否可以通过点击 modal 关闭 Dialog | boolean    | — | true |\n| close-on-press-escape | 是否可以通过按下 ESC 关闭 Dialog | boolean    | — | true |\n| show-close | 是否显示关闭按钮 | boolean    | — | true |\n| before-close | 关闭前的回调，会暂停 Dialog 的关闭 | function(done)，done 用于关闭 Dialog | — | — |\n| center | 是否对头部和底部采用居中布局 | boolean | — | false |\n| destroy-on-close | 关闭时销毁 Dialog 中的元素 | boolean | — | false |\n\n### Slot\n| name | 说明 |\n|------|--------|\n| — | Dialog 的内容 |\n| title | Dialog 标题区的内容 |\n| footer | Dialog 按钮操作区的内容 |\n\n### Events\n| 事件名称      | 说明    | 回调参数      |\n|---------- |-------- |---------- |\n| open  | Dialog 打开的回调 | — |\n| opened  | Dialog 打开动画结束时的回调 | — |\n| close  | Dialog 关闭的回调 | — |\n| closed | Dialog 关闭动画结束时的回调 | — |\n","el-divider":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/divider](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/divider) \n     \n| 参数          | 说明            | 类型            | 可选值                 | 默认值   |\n|-------------  |---------------- |---------------- |---------------------- |-------- |\n| direction      | 设置分割线方向  | string  |            horizontal / vertical          |    horizontal     |\n| content-position      | 设置分割线文案的位置 | string  |  left / right / center  |  center |","el-drawer":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/drawer](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/drawer) \n     \n\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| append-to-body     | Drawer 自身是否插入至 body 元素上。嵌套的 Drawer 必须指定该属性并赋值为 true   | boolean   | — | false |\n| before-close | 关闭前的回调，会暂停 Drawer 的关闭 | function(done)，done 用于关闭 Drawer | — | — |\n| close-on-press-escape | 是否可以通过按下 ESC 关闭 Drawer | boolean    | — | true |\n| custom-class      | Drawer 的自定义类名 | string    | — | — |\n| destroy-on-close | 控制是否在关闭 Drawer 之后将子元素全部销毁 | boolean | - | false |\n| modal     | 是否需要遮罩层   | boolean   | — | true |\n| modal-append-to-body     | 遮罩层是否插入至 body 元素上，若为 false，则遮罩层会插入至 Drawer 的父元素上   | boolean   | — | true |\n| direction | Drawer 打开的方向 | Direction | rtl / ltr / ttb / btt | rtl |\n| show-close | 是否显示关闭按钮 | boolean    | — | true |\n| size | Drawer 窗体的大小, 当使用 `number` 类型时, 以像素为单位, 当使用 `string` 类型时, 请传入 'x%', 否则便会以 `number` 类型解释 | number / string | - | '30%' |\n| title     | Drawer 的标题，也可通过具名 slot （见下表）传入 | string    | — | — |\n| visible   | 是否显示 Drawer，支持 .sync 修饰符 | boolean | — | false |\n| wrapperClosable | 点击遮罩层是否可以关闭 Drawer | boolean | - | true |\n| withHeader | 控制是否显示 header 栏, 默认为 true, 当此项为 false 时, title attribute 和 title slot 均不生效 | boolean | - | true |\n\n### Drawer Slot\n\n| name | 说明 |\n|------|--------|\n| — | Drawer 的内容 |\n| title | Drawer 标题区的内容 |\n\n### Drawer Methods\n\n| name | 说明 |\n| ---- | ---  |\n| closeDrawer | 用于关闭 Drawer, 该方法会调用传入的 `before-close` 方法 |\n\n### Drawer Events\n\n| 事件名称      | 说明    | 回调参数      |\n|---------- |-------- |---------- |\n| open  | Drawer 打开的回调 | — |\n| opened  | Drawer 打开动画结束时的回调 | — |\n| close  | Drawer 关闭的回调 | — |\n| closed | Drawer 关闭动画结束时的回调 | — |\n","el-dropdown":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/dropdown](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/dropdown) \n     \n| 参数          | 说明                                                                                                     | 类型    | 可选值                                               | 默认值     |\n| ------------- | -------------------------------------------------------------------------------------------------------- | ------- | ---------------------------------------------------- | ---------- |\n| placement     | 菜单弹出位置                                                                                             | string  | top/top-start/top-end/bottom/bottom-start/bottom-end | bottom-end |\n| trigger       | 触发下拉的行为                                                                                           | string  | hover, click                                         | hover      |\n| hide-on-click | 是否在点击菜单项后隐藏菜单                                                                               | boolean | —                                                    | true       |\n| show-timeout  | 展开下拉菜单的延时（仅在 trigger 为 hover 时有效）                                                       | number  | —                                                    | 250        |\n| hide-timeout  | 收起下拉菜单的延时（仅在 trigger 为 hover 时有效）                                                       | number  | —                                                    | 150        |\n| tabindex      | Dropdown 组件的 [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) | number  | —                                                    | 0          |\n| disabled      | 是否禁用        | boolean         | —                      | false |\n\n### Dropdown Slots\n\n| Name     | 说明                                                       |\n| -------- | ---------------------------------------------------------- |\n| —        | 触发下拉列表显示的元素。 注意： 必须是一个元素或者或者组件 |\n| dropdown | 下拉列表，通常是 `<el-dropdown-menu>` 组件                 |\n\n### Dropdown Events\n| 事件名称       | 说明                     | 回调参数                      |\n| -------------- | ------------------------ | ----------------------------- |\n| command        | 点击菜单项触发的事件回调 | dropdown-item 的指令          |\n| visible-change | 下拉框出现/隐藏时触发    | 出现则为 true，隐藏则为 false |\n\n### Dropdown Menu Item Attributes\n| 参数     | 说明       | 类型                 | 可选值 | 默认值 |\n| -------- | ---------- | -------------------- | ------ | ------ |\n| command  | 指令       | string/number/object | —      | —      |\n| disabled | 禁用       | boolean              | —      | false  |\n| divided       | 显示分割线     | boolean          | — | false |\n| icon     | 图标类名   | string               | —      | —      |\n","el-dropdown-menu-item":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/dropdown#dropdown-menu-item-attributes](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/dropdown#dropdown-menu-item-attributes) \n     \n| 参数     | 说明       | 类型                 | 可选值 | 默认值 |\n| -------- | ---------- | -------------------- | ------ | ------ |\n| command  | 指令       | string/number/object | —      | —      |\n| disabled | 禁用       | boolean              | —      | false  |\n| divided       | 显示分割线     | boolean          | — | false |\n| icon     | 图标类名   | string               | —      | —      |\n","el-empty":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/empty](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/empty) \n     \n| 参数          | 说明            | 类型            | 可选值                 | 默认值   |\n|-------------  |---------------- |---------------- |---------------------- |-------- |\n| image          | 图片地址         | string  |          —             |    —     |\n| image-size    | 图片大小（宽度）  | number | — |    —  |\n| description  | 文本描述    | string  |    —  |  — |\n\n### Empty Slots\n\n| Name | 说明 |\n|------|--------|\n| default | 自定义底部内容  |\n| image | 自定义图片     |\n| description | 自定义描述文字     |\n","el-form":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/form](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/form) \n     \n\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| model   | 表单数据对象 | object      |                  —                |  — |\n| rules    | 表单验证规则 | object | — | — |\n| inline    | 行内表单模式 | boolean | — | false |\n| label-position | 表单域标签的位置，如果值为 right/left 时，则需要设置 `label-width` | string |  left/right/top            | right |\n| label-width | 表单域标签的宽度，例如 '50px'。作为 Form 直接子元素的 form-item 会继承该值。支持 `auto`。 | string | — | — |\n| label-suffix | 表单域标签的后缀 | string | — | — |\n| hide-required-asterisk | 是否隐藏必填字段的标签旁边的红色星号 | boolean | — | false |\n| show-message  | 是否显示校验错误信息 | boolean | — | true |\n| inline-message  | 是否以行内形式展示校验信息 | boolean | — | false |\n| validate-on-rule-change  | 是否在 `rules` 属性改变后立即触发一次验证 | boolean | — | true |\n| disabled | 是否禁用该表单内的所有组件。若设置为 true，则表单内组件上的 disabled 属性不再生效 | boolean | — | false |\n\n### Form Methods\n\n| 方法名      | 说明          | 参数\n|---------- |-------------- | --------------\n| validate | 对整个表单进行校验的方法，参数为一个回调函数。该回调函数会在校验结束后被调用，并传入两个参数：是否校验成功和未通过校验的字段。若不传入回调函数，则会返回一个 promise | Function(callback: Function(boolean, object))\n| validateField | 对部分表单字段进行校验的方法 | Function(props: array \\| string, callback: Function(errorMessage: string))\n| resetFields | 对整个表单进行重置，将所有字段值重置为初始值并移除校验结果 | —\n| clearValidate | 移除表单项的校验结果。传入待移除的表单项的 prop 属性或者 prop 组成的数组，如不传则移除整个表单的校验结果 | Function(props: array \\| string)\n\n### Form Events\n| 事件名称 | 说明    | 回调参数  |\n|--------- |-------- |---------- |\n| validate | 任一表单项被校验后触发 | 被校验的表单项 prop 值，校验是否通过，错误消息（如果存在） |\n\n### Form-Item Attributes\n\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| prop    | 表单域 model 字段，在使用 validate、resetFields 方法的情况下，该属性是必填的 | string    | 传入 Form 组件的 `model` 中的字段 | — |\n| label | 标签文本 | string | — | — |\n| label-width | 表单域标签的的宽度，例如 '50px'。支持 `auto`。 | string |       —       | — |\n| required | 是否必填，如不设置，则会根据校验规则自动生成 | boolean | — | false |\n| rules    | 表单验证规则 | object | — | — |\n| error    | 表单域验证错误信息, 设置该值会使表单验证状态变为`error`，并显示该错误信息 | string | — | — |\n| show-message  | 是否显示校验错误信息 | boolean | — | true |\n| inline-message  | 以行内形式展示校验信息 | boolean | — | false |\n\n### Form-Item Slot\n| name | 说明 |\n|------|--------|\n| — | Form Item 的内容 |\n| label | 标签文本的内容 |\n\n### Form-Item Scoped Slot\n|  name  |   说明  |\n|--------|--------|\n|  error | 自定义表单校验信息的显示方式，参数为 { error } |\n### Form-Item Methods\n\n| 方法名      | 说明          | 参数\n|---------- |-------------- | --------------\n| resetField | 对该表单项进行重置，将其值重置为初始值并移除校验结果 | -\n| clearValidate | 移除该表单项的校验结果 | -\n","el-form-item":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/form#form-item-attributes](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/form#form-item-attributes) \n     \n\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| prop    | 表单域 model 字段，在使用 validate、resetFields 方法的情况下，该属性是必填的 | string    | 传入 Form 组件的 `model` 中的字段 | — |\n| label | 标签文本 | string | — | — |\n| label-width | 表单域标签的的宽度，例如 '50px'。支持 `auto`。 | string |       —       | — |\n| required | 是否必填，如不设置，则会根据校验规则自动生成 | boolean | — | false |\n| rules    | 表单验证规则 | object | — | — |\n| error    | 表单域验证错误信息, 设置该值会使表单验证状态变为`error`，并显示该错误信息 | string | — | — |\n| show-message  | 是否显示校验错误信息 | boolean | — | true |\n| inline-message  | 以行内形式展示校验信息 | boolean | — | false |\n\n### Form-Item Slot\n| name | 说明 |\n|------|--------|\n| — | Form Item 的内容 |\n| label | 标签文本的内容 |\n\n### Form-Item Scoped Slot\n|  name  |   说明  |\n|--------|--------|\n|  error | 自定义表单校验信息的显示方式，参数为 { error } |\n### Form-Item Methods\n\n| 方法名      | 说明          | 参数\n|---------- |-------------- | --------------\n| resetField | 对该表单项进行重置，将其值重置为初始值并移除校验结果 | -\n| clearValidate | 移除该表单项的校验结果 | -\n","el-i18n":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/i18n](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/i18n) \n     lement 组件内部默认使用中文，若希望使用其他语言，则需要进行多语言设置。以英文为例，在 main.js 中：\n\n```javascript\n// 完整引入 Element\nimport Vue from 'vue'\nimport ElementUI from '@jdcloud/jelement-next'\nimport locale from '@jdcloud/jelement-next/lib/locale/lang/en'\n\nVue.use(ElementUI, { locale })\n```\n\n或\n\n```javascript\n// 按需引入 Element\nimport Vue from 'vue'\nimport { Button, Select } from '@jdcloud/jelement-next'\nimport lang from '@jdcloud/jelement-next/lib/locale/lang/en'\nimport locale from '@jdcloud/jelement-next/lib/locale'\n\n// 设置语言\nlocale.use(lang)\n\n// 引入组件\nVue.component(Button.name, Button)\nVue.component(Select.name, Select)\n```\n\n如果使用其它语言，默认情况下中文语言包依旧是被引入的，可以使用 webpack 的 NormalModuleReplacementPlugin 替换默认语言包。\n\n**webpack.config.js**\n```javascript\n{\n  plugins: [\n    new webpack.NormalModuleReplacementPlugin(/@jdcloud[\\/\\\\]jelement-next[\\/\\\\]lib[\\/\\\\]locale[\\/\\\\]lang[\\/\\\\]zh-CN/, '@jdcloud/jelement-next/lib/locale/lang/en')\n  ]\n}\n```\n\n## 兼容 `vue-i18n@5.x`\n\nElement 兼容 [vue-i18n@5.x](https://github.com/kazupon/vue-i18n)，搭配使用能更方便地实现多语言切换。\n\n```javascript\nimport Vue from 'vue'\nimport VueI18n from 'vue-i18n'\nimport Element from '@jdcloud/jelement-next'\nimport enLocale from '@jdcloud/jelement-next/lib/locale/lang/en'\nimport zhLocale from '@jdcloud/jelement-next/lib/locale/lang/zh-CN'\n\nVue.use(VueI18n)\nVue.use(Element)\n\nVue.config.lang = 'zh-cn'\nVue.locale('zh-cn', zhLocale)\nVue.locale('en', enLocale)\n```\n\n## 兼容其他 i18n 插件\n如果不使用 `vue-i18n@5.x`，而是用其他的 i18n 插件，Element 将无法兼容，但是可以自定义 Element 的 i18n 的处理方法。\n\n```javascript\nimport Vue from 'vue'\nimport Element from '@jdcloud/jelement-next'\nimport enLocale from '@jdcloud/jelement-next/lib/locale/lang/en'\nimport zhLocale from '@jdcloud/jelement-next/lib/locale/lang/zh-CN'\n\nVue.use(Element, {\n  i18n: function (path, options) {\n    // ...\n  }\n})\n```\n\n## 兼容 `vue-i18n@6.x`\n\n默认不支持 6.x 的 `vue-i18n`，你需要手动处理。\n\n```javascript\nimport Vue from 'vue'\nimport Element from '@jdcloud/jelement-next'\nimport VueI18n from 'vue-i18n'\nimport enLocale from '@jdcloud/jelement-next/lib/locale/lang/en'\nimport zhLocale from '@jdcloud/jelement-next/lib/locale/lang/zh-CN'\n\nVue.use(VueI18n)\n\nconst messages = {\n  en: {\n    message: 'hello',\n    ...enLocale // 或者用 Object.assign({ message: 'hello' }, enLocale)\n  },\n  zh: {\n    message: '你好',\n    ...zhLocale // 或者用 Object.assign({ message: '你好' }, zhLocale)\n  }\n}\n// Create VueI18n instance with options\nconst i18n = new VueI18n({\n  locale: 'en', // set locale\n  messages, // set locale messages\n})\n\nVue.use(Element, {\n  i18n: (key, value) => i18n.t(key, value)\n})\n\nnew Vue({ i18n }).$mount('#app')\n```\n\n## 按需加载里定制 i18n\n\n```js\nimport Vue from 'vue'\nimport DatePicker from '@jdcloud/jelement-next/lib/date-picker'\nimport VueI18n from 'vue-i18n'\n\nimport enLocale from '@jdcloud/jelement-next/lib/locale/lang/en'\nimport zhLocale from '@jdcloud/jelement-next/lib/locale/lang/zh-CN'\nimport ElementLocale from '@jdcloud/jelement-next/lib/locale'\n\nVue.use(VueI18n)\nVue.use(DatePicker)\n\nconst messages = {\n  en: {\n    message: 'hello',\n    ...enLocale\n  },\n  zh: {\n    message: '你好',\n    ...zhLocale\n  }\n}\n// Create VueI18n instance with options\nconst i18n = new VueI18n({\n  locale: 'en', // set locale\n  messages, // set locale messages\n})\n\nElementLocale.i18n((key, value) => i18n.t(key, value))\n```\n\n## 通过 CDN 的方式加载语言文件\n\n```html\n<script src=\"//unpkg.com/vue\"></script>\n<script src=\"https://j.jdcloud.com/jelement-next/lib/index.js\"></script>\n<script src=\"https://j.jdcloud.com/jelement-next/lib/umd/locale/en.js\"></script>\n\n<script>\n  ELEMENT.locale(ELEMENT.lang.en)\n</script>\n```\n\n搭配 `vue-i18n` 使用\n\n```html\n<script src=\"//unpkg.com/vue\"></script>\n<script src=\"//unpkg.com/vue-i18n/dist/vue-i18n.js\"></script>\n<script src=\"//unpkg.com/@jdcloud/jelement-next\"></script>\n<script src=\"https://j.jdcloud.com/jelement-next/lib/umd/locale/zh-CN.js\"></script>\n<script src=\"https://j.jdcloud.com/jelement-next/lib/umd/locale/en.js\"></script>\n\n<script>\n  Vue.locale('en', ELEMENT.lang.en)\n  Vue.locale('zh-cn', ELEMENT.lang.zhCN)\n</script>\n```\n\n目前 Element 内置了以下语言：\n<ul class=\"language-list\">\n  <li>简体中文（zh-CN）</li>\n  <li>英语（en）</li>\n  <li>德语（de）</li>\n  <li>葡萄牙语（pt）</li>\n  <li>西班牙语（es）</li>\n  <li>丹麦语（da）</li>\n  <li>法语（fr）</li>\n  <li>挪威语（nb-NO）</li>\n  <li>繁体中文（zh-TW）</li>\n  <li>意大利语（it）</li>\n  <li>韩语（ko）</li>\n  <li>日语（ja）</li>\n  <li>荷兰语（nl）</li>\n  <li>越南语（vi）</li>\n  <li>俄语（ru-RU）</li>\n  <li>土耳其语（tr-TR）</li>\n  <li>巴西葡萄牙语（pt-br）</li>\n  <li>波斯语（fa）</li>\n  <li>泰语（th）</li>\n  <li>印尼语（id）</li>\n  <li>保加利亚语（bg）</li>\n  <li>波兰语（pl）</li>\n  <li>芬兰语（fi）</li>\n  <li>瑞典语（sv-SE）</li>\n  <li>希腊语（el）</li>\n  <li>斯洛伐克语（sk）</li>\n  <li>加泰罗尼亚语（ca）</li>\n  <li>捷克语（cs-CZ）</li>\n  <li>乌克兰语（ua）</li>\n  <li>土库曼语（tk）</li>\n  <li>泰米尔语（ta）</li>\n  <li>拉脱维亚语（lv）</li>\n  <li>南非荷兰语（af-ZA）</li>\n  <li>爱沙尼亚语（ee）</li>\n  <li>斯洛文尼亚语（sl）</li>\n  <li>阿拉伯语（ar）</li>\n  <li>希伯来语（he）</li>\n  <li>立陶宛语（lt）</li>\n  <li>蒙古语（mn）</li>\n  <li>哈萨克斯坦语（kz）</li>\n  <li>匈牙利语（hu）</li>\n  <li>罗马尼亚语（ro）</li>\n  <li>库尔德语（ku）</li>\n  <li>维吾尔语（ug-CN）</li>\n  <li>高棉语（km）</li>\n  <li>塞尔维亚语（sr）</li>\n  <li>巴斯克语（eu）</li>\n  <li>吉尔吉斯语（kg）</li>\n  <li>亚美尼亚语 (hy)</li>\n  <li>克罗地亚 (hr)</li>\n  <li>世界语 (eo)</li>\n</ul>\n\n如果你需要使用其他的语言，欢迎贡献 PR：只需在 [这里](https://git.jd.com/JDCloud-FE/jelement-next/tree/master/src/locale/lang) 添加一个语言配置文件即可。\n","el-icon":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/icon](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/icon) \n     标\n\n提供了一套常用的图标集合。\n\n### 使用方法\n\n直接通过设置类名为 `el-icon-iconName` 来使用即可。例如：\n\n:::demo\n```html\n<i class=\"el-icon-edit\"></i>\n<i class=\"el-icon-share\"></i>\n<i class=\"el-icon-delete\"></i>\n<el-button type=\"primary\" icon=\"el-icon-search\">搜索</el-button>\n\n```\n:::\n\n### 图标集合\n\n<ul class=\"icon-list\">\n  <li v-for=\"name in $icon\" :key=\"name\">\n    <span>\n      <i :class=\"'el-icon-' + name\"></i>\n      <span class=\"icon-name\">{{'el-icon-' + name}}</span>\n    </span>\n  </li>\n</ul>\n\n### 京东云图标集合\n\n<ul class=\"icon-list\">\n  <li v-for=\"name in $jcIcon\" :key=\"name\">\n    <span>\n      <i :class=\"'jc-icon-' + name\"></i>\n      <span class=\"icon-name\">{{'jc-icon-' + name}}</span>\n    </span>\n  </li>\n</ul>\n","el-image":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/image](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/image) \n     \n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| src | 图片源，同原生 | string | — | - |\n| fit | 确定图片如何适应容器框，同原生 [object-fit](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) | string | fill / contain / cover / none / scale-down | - |\n| alt | 原生 alt | string | - | - |\n| referrer-policy | 原生 referrerPolicy | string | - | - |\n| lazy | 是否开启懒加载 | boolean | — | false |\n| scroll-container | 开启懒加载后，监听 scroll 事件的容器 | string / HTMLElement | — | 最近一个 overflow 值为 auto 或 scroll 的父元素 |\n| preview-src-list | 开启图片预览功能 | Array | — | - |\n| z-index | 设置图片预览的 z-index | Number | — | 2000 |\n\n### Events\n| 事件名称      | 说明    | 回调参数      |\n|---------- |-------- |---------- |\n| load | 图片加载成功触发 | (e: Event) |\n| error | 图片加载失败触发 | (e: Error) |\n\n### Slots\n| 名称    | 说明         |\n|---------|-------------|\n| placeholder | 图片未加载的占位内容 |\n| error | 加载失败的内容 |\n\n\n","el-infinite-scroll":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/infiniteScroll](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/infiniteScroll) \n     \n\n| 参数           | 说明                           | 类型      | 可选值                               | 默认值  |\n| -------------- | ------------------------------ | --------- | ------------------------------------ | ------- |\n| infinite-scroll-disabled | 是否禁用           | boolean      | - |false |\n| infinite-scroll-delay   | 节流时延，单位为ms   | number       |   - |200   |\n| infinite-scroll-distance| 触发加载的距离阈值，单位为px | number   |- |0 |\n| infinite-scroll-immediate | 是否立即执行加载方法，以防初始状态下内容无法撑满容器。| boolean | - |true |\n","el-input-number":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/input-number](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/input-number) \n     \n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|----------|-------------- |----------|--------------------------------  |-------- |\n| value / v-model    | 绑定值         | number | — | 0 |\n| min      | 设置计数器允许的最小值 | number | — | -Infinity |\n| max      | 设置计数器允许的最大值 | number | — | Infinity |\n| step     | 计数器步长           | number   | — | 1 |\n| step-strictly | 是否只能输入 step 的倍数 | boolean   | — | false |\n| precision| 数值精度             | number   | — | — |\n| size     | 计数器尺寸           | string   | medium, small | medium |\n| disabled | 是否禁用计数器        | boolean | — | false |\n| controls | 是否使用控制按钮        | boolean | — | true |\n| controls-position | 控制按钮位置 | string | right | - |\n| name | 原生属性 | string | — | — |\n| label | 输入框关联的label文字 | string | — | — |\n| placeholder | 输入框默认 placeholder | string | - | - |\n\n### Events\n| 事件名称 | 说明 | 回调参数 |\n|---------|--------|---------|\n| change | 绑定值被改变时触发 | currentValue, oldValue |\n| blur | 在组件 Input 失去焦点时触发 | (event: Event) |\n| focus | 在组件 Input 获得焦点时触发 | (event: Event) |\n\n### Methods\n| 方法名 | 说明 | 参数 |\n| ---- | ---- | ---- |\n| focus | 使 input 获取焦点 | - |\n| select | 选中 input 中的文字 | — |\n","el-input":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/input](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/input) \n     \n\n| 参数          | 说明            | 类型            | 可选值                 | 默认值   |\n|-------------  |---------------- |---------------- |---------------------- |-------- |\n| type         | 类型   | string  | text，textarea 和其他 [原生 input 的 type 值](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types) | text |\n| value / v-model | 绑定值           | string / number  | — | — |\n| maxlength     | 原生属性，最大输入长度      | number          |  —  | — |\n| minlength     | 原生属性，最小输入长度      | number          | — | — |\n| show-word-limit | 是否显示输入字数统计，只在 `type = \"text\"` 或 `type = \"textarea\"` 时有效 | boolean    |  —  | false |\n| placeholder   | 输入框占位文本    | string          | — | — |\n| clearable     | 是否可清空        | boolean         | — | false |\n| show-password | 是否显示切换密码图标| boolean         | — | false |\n| disabled      | 禁用            | boolean         | — | false   |\n| size          | 输入框尺寸，只在 `type!=\"textarea\"` 时有效      | string          |   small   | — |\n| prefix-icon   | 输入框头部图标    | string          | — | — |\n| suffix-icon   | 输入框尾部图标    | string          | — | — |\n| rows          | 输入框行数，只对 `type=\"textarea\"` 有效  |  number | — |  2   |\n| autosize      | 自适应内容高度，只对 `type=\"textarea\"` 有效，可传入对象，如，{ minRows: 2, maxRows: 6 }  |  boolean / object | — |  false   |\n| name | 原生属性 | string | — | — |\n| readonly | 原生属性，是否只读 | boolean | — | false |\n| max | 原生属性，设置最大值 | — | — | — |\n| min | 原生属性，设置最小值 | — | — | — |\n| step | 原生属性，设置输入字段的合法数字间隔 | — | — | — |\n| resize | 控制是否能被用户缩放 | string | none, both, horizontal, vertical | — |\n| autofocus | 原生属性，自动获取焦点 | boolean | true, false | false |\n| form | 原生属性 | string | — | — |\n| label | 输入框关联的label文字 | string | — | — |\n| tabindex | 输入框的tabindex | string | - | - |\n| validate-event | 输入时是否触发表单的校验 | boolean | - | true |\n\n### Input Slots\n| name | 说明 |\n|------|--------|\n| prefix | 输入框头部内容，只对 `type=\"text\"` 有效 |\n| suffix | 输入框尾部内容，只对 `type=\"text\"` 有效 |\n| prepend | 输入框前置内容，只对 `type=\"text\"` 有效 |\n| append | 输入框后置内容，只对 `type=\"text\"` 有效 |\n\n### Input Events\n| 事件名称 | 说明 | 回调参数 |\n|---------|--------|---------|\n| blur | 在 Input 失去焦点时触发 | (event: Event) |\n| focus | 在 Input 获得焦点时触发 | (event: Event) |\n| change | 仅在输入框失去焦点或用户按下回车时触发 | (value: string \\| number) |\n| input | 在 Input 值改变时触发 | (value: string \\| number) |\n| clear | 在点击由 `clearable` 属性生成的清空按钮时触发 | — |\n\n### Input Methods\n| 方法名 | 说明 | 参数 |\n| ---- | ---- | ---- |\n| focus | 使 input 获取焦点 | — |\n| blur | 使 input 失去焦点 | — |\n| select | 选中 input 中的文字 | — |\n\n ","el-installation":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/installation](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/installation) \n     # npm 安装\n\n推荐使用 npm 的方式安装，它能更好地和 [webpack](https://webpack.js.org/) 打包工具配合使用。\n\n```shell\nnpm i @jdcloud/jelement-next -S\n```\n\n### CDN\n\n目前可以通过 [j.jdcloud.com/jelement-next](https://j.jdcloud.com/jelement-next/lib/index.js) 获取到最新版本的资源，在页面上引入 js 和 css 文件即可开始使用。\n\n```html\n<!-- 引入样式 -->\n<link rel=\"stylesheet\" href=\"https://j.jdcloud.com/jelement-next/ui-default/lib/index.css\">\n<!-- 引入组件库 -->\n<script src=\"https://j.jdcloud.com/jelement-next/lib/index.js\"></script>\n```\n\n:::tip\n我们建议使用 CDN 引入 Element 的用户在链接地址上锁定版本，以免将来 Element 升级时受到非兼容性更新的影响。\n\n**eg. https://j.jdcloud.com/jelement-next/lib/{version}/index.js**\n:::\n\n### Hello world\n\n通过 CDN 的方式我们可以很容易地使用 JElement 写出一个 Hello world 页面。[在线演示](https://codepen.io/my9074/pen/WNOoyXq)\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <!-- import CSS -->\n  <link rel=\"stylesheet\" href=\"https://j.jdcloud.com/jelement-next/ui-default/lib/index.css\">\n</head>\n<body>\n  <div id=\"app\">\n    <el-button @click=\"visible = true\">Button</el-button>\n    <el-dialog :visible.sync=\"visible\" title=\"Hello world\">\n      <p>Try Element</p>\n    </el-dialog>\n  </div>\n</body>\n  <!-- import Vue before Element -->\n  <script src=\"https://j.jdcloud.com/lib/vue-2.6.14/vue.min.js\"></script>\n  <!-- import JavaScript -->\n  <script src=\"https://j.jdcloud.com/jelement-next/lib/index.js\"></script>\n  <script>\n    new Vue({\n      el: '#app',\n      data: function() {\n        return { visible: false }\n      }\n    })\n  </script>\n</html>\n```\n\n如果是通过 npm 安装，并希望配合 webpack 使用，请阅读下一节：[快速上手](/#/zh-CN/component/quickstart)。\n","el-layout":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/layout](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/layout) \n     \n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| gutter | 栅格间隔 | number | — | 0 |\n| type | 布局模式，可选 flex，现代浏览器下有效 | string | — | — |\n| justify | flex 布局下的水平排列方式 | string | start/end/center/space-around/space-between | start |\n| align | flex 布局下的垂直排列方式 | string | top/middle/bottom | — |\n| tag | 自定义元素标签 | string | * | div |\n\n### Col Attributes\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| span | 栅格占据的列数 | number | — | 24 |\n| offset | 栅格左侧的间隔格数 | number | — | 0 |\n| push |  栅格向右移动格数 | number | — | 0 |\n| pull |  栅格向左移动格数 | number | — | 0 |\n| xs | `<768px` 响应式栅格数或者栅格属性对象 | number/object (例如： {span: 4, offset: 4}) | — | — |\n| sm | `≥768px` 响应式栅格数或者栅格属性对象 | number/object (例如： {span: 4, offset: 4}) | — | — |\n| md | `≥992px` 响应式栅格数或者栅格属性对象 | number/object (例如： {span: 4, offset: 4}) | — | — |\n| lg | `≥1200px` 响应式栅格数或者栅格属性对象 | number/object (例如： {span: 4, offset: 4}) | — | — |\n| xl | `≥1920px` 响应式栅格数或者栅格属性对象 | number/object (例如： {span: 4, offset: 4}) | — | — |\n| tag | 自定义元素标签 | string | * | div |\n","el-link":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/link](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/link) \n     \n\n| 参数      | 说明           | 类型    | 可选值                               | 默认值  |\n| --------- | -------------- | ------- | ------------------------------------ | ------- |\n| type      | 类型           | string  | primary / success / warning / danger | default |\n| underline | 是否下划线     | boolean | —                                    | true    |\n| disabled  | 是否禁用状态   | boolean | —                                    | false   |\n| href      | 原生 href 属性 | string  | —                                    | -       |\n| icon      | 图标类名       | string  | —                                    | -       |\n","el-loading":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/loading](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/loading) \n     g 加载\n\n加载数据时显示动效。\n\n### 区域加载\n\n在表格等容器中加载数据时显示。\n\n:::demo Element 提供了两种调用 Loading 的方法：指令和服务。对于自定义指令`v-loading`，只需要绑定`Boolean`即可。默认状况下，Loading 遮罩会插入到绑定元素的子节点，通过添加`body`修饰符，可以使遮罩插入至 DOM 中的 body 上。\n```html\n<template>\n  <el-table\n    v-loading=\"loading\"\n    :data=\"tableData\"\n    style=\"width: 100%\">\n    <el-table-column\n      prop=\"date\"\n      label=\"日期\"\n      width=\"180\">\n    </el-table-column>\n    <el-table-column\n      prop=\"name\"\n      label=\"姓名\"\n      width=\"180\">\n    </el-table-column>\n    <el-table-column\n      prop=\"address\"\n      label=\"地址\">\n    </el-table-column>\n  </el-table>\n</template>\n\n<style>\n  body {\n    margin: 0;\n  }\n</style>\n\n<script>\n  export default {\n    data() {\n      return {\n        tableData: [{\n          date: '2016-05-03',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1518 弄'\n        }, {\n          date: '2016-05-02',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1518 弄'\n        }, {\n          date: '2016-05-04',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1518 弄'\n        }],\n        loading: true\n      };\n    }\n  };\n</script>\n```\n:::\n\n### 自定义\n\n可自定义加载文案、图标和背景色。\n\n:::demo 在绑定了`v-loading`指令的元素上添加`element-loading-text`属性，其值会被渲染为加载文案，并显示在加载图标的下方。类似地，`element-loading-spinner`和`element-loading-background`属性分别用来设定图标类名和背景色值。\n```html\n<template>\n  <el-table\n    v-loading=\"loading\"\n    element-loading-text=\"拼命加载中\"\n    element-loading-spinner=\"el-icon-loading\"\n    element-loading-background=\"rgba(0, 0, 0, 0.8)\"\n    :data=\"tableData\"\n    style=\"width: 100%\">\n    <el-table-column\n      prop=\"date\"\n      label=\"日期\"\n      width=\"180\">\n    </el-table-column>\n    <el-table-column\n      prop=\"name\"\n      label=\"姓名\"\n      width=\"180\">\n    </el-table-column>\n    <el-table-column\n      prop=\"address\"\n      label=\"地址\">\n    </el-table-column>\n  </el-table>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        tableData: [{\n          date: '2016-05-03',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1518 弄'\n        }, {\n          date: '2016-05-02',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1518 弄'\n        }, {\n          date: '2016-05-04',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1518 弄'\n        }],\n        loading: true\n      };\n    }\n  };\n</script>\n```\n:::\n\n### 整页加载\n\n页面数据加载时显示。\n\n:::demo 当使用指令方式时，全屏遮罩需要添加`fullscreen`修饰符（遮罩会插入至 body 上），此时若需要锁定屏幕的滚动，可以使用`lock`修饰符；当使用服务方式时，遮罩默认即为全屏，无需额外设置。\n\n```html\n<template>\n  <el-button\n    type=\"primary\"\n    @click=\"openFullScreen1\"\n    v-loading.fullscreen.lock=\"fullscreenLoading\">\n    指令方式\n  </el-button>\n  <el-button\n    type=\"primary\"\n    @click=\"openFullScreen2\">\n    服务方式\n  </el-button>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        fullscreenLoading: false\n      }\n    },\n    methods: {\n      openFullScreen1() {\n        this.fullscreenLoading = true;\n        setTimeout(() => {\n          this.fullscreenLoading = false;\n        }, 2000);\n      },\n      openFullScreen2() {\n        const loading = this.$loading({\n          lock: true,\n          text: 'Loading',\n          spinner: 'el-icon-loading',\n          background: 'rgba(0, 0, 0, 0.7)'\n        });\n        setTimeout(() => {\n          loading.close();\n        }, 2000);\n      }\n    }\n  }\n</script>\n```\n:::\n\n### 服务\nLoading 还可以以服务的方式调用。引入 Loading 服务：\n```javascript\nimport { Loading } from 'element-ui';\n```\n在需要调用时：\n```javascript\nLoading.service(options);\n```\n其中 `options` 参数为 Loading 的配置项，具体见下表。`LoadingService` 会返回一个 Loading 实例，可通过调用该实例的 `close` 方法来关闭它：\n```javascript\nlet loadingInstance = Loading.service(options);\nthis.$nextTick(() => { // 以服务的方式调用的 Loading 需要异步关闭\n  loadingInstance.close();\n});\n```\n需要注意的是，以服务的方式调用的全屏 Loading 是单例的：若在前一个全屏 Loading 关闭前再次调用全屏 Loading，并不会创建一个新的 Loading 实例，而是返回现有全屏 Loading 的实例：\n```javascript\nlet loadingInstance1 = Loading.service({ fullscreen: true });\nlet loadingInstance2 = Loading.service({ fullscreen: true });\nconsole.log(loadingInstance1 === loadingInstance2); // true\n```\n此时调用它们中任意一个的 `close` 方法都能关闭这个全屏 Loading。\n\n如果完整引入了 Element，那么 Vue.prototype 上会有一个全局方法 `$loading`，它的调用方式为：`this.$loading(options)`，同样会返回一个 Loading 实例。\n\n### Options\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| target | Loading 需要覆盖的 DOM 节点。可传入一个 DOM 对象或字符串；若传入字符串，则会将其作为参数传入 `document.querySelector`以获取到对应 DOM 节点 | object/string | — | document.body |\n| body | 同 `v-loading` 指令中的 `body` 修饰符 | boolean | — | false |\n| fullscreen | 同 `v-loading` 指令中的 `fullscreen` 修饰符 | boolean | — | true |\n| lock | 同 `v-loading` 指令中的 `lock` 修饰符 | boolean | — | false |\n| text | 显示在加载图标下方的加载文案 | string | — | — |\n| spinner | 自定义加载图标类名 | string | — | — |\n| background | 遮罩背景色 | string | — | — |\n| customClass | Loading 的自定义类名 | string | — | — |","el-menu":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/menu](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/menu) \n     u 导航菜单\n\n为网站提供导航功能的菜单。\n\n### 顶栏\n\n适用广泛的基础用法。\n\n:::demo 导航菜单默认为垂直模式，通过`mode`属性可以使导航菜单变更为水平模式。另外，在菜单中通过`submenu`组件可以生成二级菜单。Menu 还提供了`background-color`、`text-color`和`active-text-color`，分别用于设置菜单的背景色、菜单的文字颜色和当前激活菜单的文字颜色。\n\n```html\n<el-menu :default-active=\"activeIndex\" class=\"el-menu-demo\" mode=\"horizontal\" @select=\"handleSelect\">\n  <el-menu-item index=\"1\">处理中心</el-menu-item>\n  <el-submenu index=\"2\">\n    <template slot=\"title\">我的工作台</template>\n    <el-menu-item index=\"2-1\">选项1</el-menu-item>\n    <el-menu-item index=\"2-2\">选项2</el-menu-item>\n    <el-menu-item index=\"2-3\">选项3</el-menu-item>\n    <el-submenu index=\"2-4\">\n      <template slot=\"title\">选项4</template>\n      <el-menu-item index=\"2-4-1\">选项1</el-menu-item>\n      <el-menu-item index=\"2-4-2\">选项2</el-menu-item>\n      <el-menu-item index=\"2-4-3\">选项3</el-menu-item>\n    </el-submenu>\n  </el-submenu>\n  <el-menu-item index=\"3\" disabled>消息中心</el-menu-item>\n  <el-menu-item index=\"4\"><a href=\"https://www.ele.me\" target=\"_blank\">订单管理</a></el-menu-item>\n</el-menu>\n<div class=\"line\"></div>\n<el-menu\n  :default-active=\"activeIndex2\"\n  class=\"el-menu-demo\"\n  mode=\"horizontal\"\n  @select=\"handleSelect\"\n  background-color=\"#545c64\"\n  text-color=\"#fff\"\n  active-text-color=\"#ffd04b\">\n  <el-menu-item index=\"1\">处理中心</el-menu-item>\n  <el-submenu index=\"2\">\n    <template slot=\"title\">我的工作台</template>\n    <el-menu-item index=\"2-1\">选项1</el-menu-item>\n    <el-menu-item index=\"2-2\">选项2</el-menu-item>\n    <el-menu-item index=\"2-3\">选项3</el-menu-item>\n    <el-submenu index=\"2-4\">\n      <template slot=\"title\">选项4</template>\n      <el-menu-item index=\"2-4-1\">选项1</el-menu-item>\n      <el-menu-item index=\"2-4-2\">选项2</el-menu-item>\n      <el-menu-item index=\"2-4-3\">选项3</el-menu-item>\n    </el-submenu>\n  </el-submenu>\n  <el-menu-item index=\"3\" disabled>消息中心</el-menu-item>\n  <el-menu-item index=\"4\"><a href=\"https://www.ele.me\" target=\"_blank\">订单管理</a></el-menu-item>\n</el-menu>\n\n<script>\n  export default {\n    data() {\n      return {\n        activeIndex: '1',\n        activeIndex2: '1'\n      };\n    },\n    methods: {\n      handleSelect(key, keyPath) {\n        console.log(key, keyPath);\n      }\n    }\n  }\n</script>\n```\n:::\n\n### 侧栏\n\n垂直菜单，可内嵌子菜单。\n\n:::demo 通过`el-menu-item-group`组件可以实现菜单进行分组，分组名可以通过`title`属性直接设定，也可以通过具名 slot 来设定。\n```html\n<el-row class=\"tac\">\n  <el-col :span=\"12\">\n    <h5>默认颜色</h5>\n    <el-menu\n      default-active=\"2\"\n      class=\"el-menu-vertical-demo\"\n      @open=\"handleOpen\"\n      @close=\"handleClose\">\n      <el-submenu index=\"1\">\n        <template slot=\"title\">\n          <i class=\"el-icon-location\"></i>\n          <span>导航一</span>\n        </template>\n        <el-menu-item-group>\n          <template slot=\"title\">分组一</template>\n          <el-menu-item index=\"1-1\">选项1</el-menu-item>\n          <el-menu-item index=\"1-2\">选项2</el-menu-item>\n        </el-menu-item-group>\n        <el-menu-item-group title=\"分组2\">\n          <el-menu-item index=\"1-3\">选项3</el-menu-item>\n        </el-menu-item-group>\n        <el-submenu index=\"1-4\">\n          <template slot=\"title\">选项4</template>\n          <el-menu-item index=\"1-4-1\">选项1</el-menu-item>\n        </el-submenu>\n      </el-submenu>\n      <el-menu-item index=\"2\">\n        <i class=\"el-icon-menu\"></i>\n        <span slot=\"title\">导航二</span>\n      </el-menu-item>\n      <el-menu-item index=\"3\" disabled>\n        <i class=\"el-icon-document\"></i>\n        <span slot=\"title\">导航三</span>\n      </el-menu-item>\n      <el-menu-item index=\"4\">\n        <i class=\"el-icon-setting\"></i>\n        <span slot=\"title\">导航四</span>\n      </el-menu-item>\n    </el-menu>\n  </el-col>\n  <el-col :span=\"12\">\n    <h5>自定义颜色</h5>\n    <el-menu\n      default-active=\"2\"\n      class=\"el-menu-vertical-demo\"\n      @open=\"handleOpen\"\n      @close=\"handleClose\"\n      background-color=\"#545c64\"\n      text-color=\"#fff\"\n      active-text-color=\"#ffd04b\">\n      <el-submenu index=\"1\">\n        <template slot=\"title\">\n          <i class=\"el-icon-location\"></i>\n          <span>导航一</span>\n        </template>\n        <el-menu-item-group>\n          <template slot=\"title\">分组一</template>\n          <el-menu-item index=\"1-1\">选项1</el-menu-item>\n          <el-menu-item index=\"1-2\">选项2</el-menu-item>\n        </el-menu-item-group>\n        <el-menu-item-group title=\"分组2\">\n          <el-menu-item index=\"1-3\">选项3</el-menu-item>\n        </el-menu-item-group>\n        <el-submenu index=\"1-4\">\n          <template slot=\"title\">选项4</template>\n          <el-menu-item index=\"1-4-1\">选项1</el-menu-item>\n        </el-submenu>\n      </el-submenu>\n      <el-menu-item index=\"2\">\n        <i class=\"el-icon-menu\"></i>\n        <span slot=\"title\">导航二</span>\n      </el-menu-item>\n      <el-menu-item index=\"3\" disabled>\n        <i class=\"el-icon-document\"></i>\n        <span slot=\"title\">导航三</span>\n      </el-menu-item>\n      <el-menu-item index=\"4\">\n        <i class=\"el-icon-setting\"></i>\n        <span slot=\"title\">导航四</span>\n      </el-menu-item>\n    </el-menu>\n  </el-col>\n</el-row>\n\n<script>\n  export default {\n    methods: {\n      handleOpen(key, keyPath) {\n        console.log(key, keyPath);\n      },\n      handleClose(key, keyPath) {\n        console.log(key, keyPath);\n      }\n    }\n  }\n</script>\n```\n:::\n\n### 折叠\n\n:::demo\n```html\n<el-radio-group v-model=\"isCollapse\" style=\"margin-bottom: 20px;\">\n  <el-radio-button :label=\"false\">展开</el-radio-button>\n  <el-radio-button :label=\"true\">收起</el-radio-button>\n</el-radio-group>\n<el-menu default-active=\"1-4-1\" class=\"el-menu-vertical-demo\" @open=\"handleOpen\" @close=\"handleClose\" :collapse=\"isCollapse\">\n  <el-submenu index=\"1\">\n    <template slot=\"title\">\n      <i class=\"el-icon-location\"></i>\n      <span slot=\"title\">导航一</span>\n    </template>\n    <el-menu-item-group>\n      <span slot=\"title\">分组一</span>\n      <el-menu-item index=\"1-1\">选项1</el-menu-item>\n      <el-menu-item index=\"1-2\">选项2</el-menu-item>\n    </el-menu-item-group>\n    <el-menu-item-group title=\"分组2\">\n      <el-menu-item index=\"1-3\">选项3</el-menu-item>\n    </el-menu-item-group>\n    <el-submenu index=\"1-4\">\n      <span slot=\"title\">选项4</span>\n      <el-menu-item index=\"1-4-1\">选项1</el-menu-item>\n    </el-submenu>\n  </el-submenu>\n  <el-menu-item index=\"2\">\n    <i class=\"el-icon-menu\"></i>\n    <span slot=\"title\">导航二</span>\n  </el-menu-item>\n  <el-menu-item index=\"3\" disabled>\n    <i class=\"el-icon-document\"></i>\n    <span slot=\"title\">导航三</span>\n  </el-menu-item>\n  <el-menu-item index=\"4\">\n    <i class=\"el-icon-setting\"></i>\n    <span slot=\"title\">导航四</span>\n  </el-menu-item>\n</el-menu>\n\n<style>\n  .el-menu-vertical-demo:not(.el-menu--collapse) {\n    width: 200px;\n    min-height: 400px;\n  }\n</style>\n\n<script>\n  export default {\n    data() {\n      return {\n        isCollapse: true\n      };\n    },\n    methods: {\n      handleOpen(key, keyPath) {\n        console.log(key, keyPath);\n      },\n      handleClose(key, keyPath) {\n        console.log(key, keyPath);\n      }\n    }\n  }\n</script>\n```\n:::\n\n### Menu Attribute\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| mode     | 模式   | string  |   horizontal / vertical   | vertical |\n| collapse  | 是否水平折叠收起菜单（仅在 mode 为 vertical 时可用）| boolean  |   —   | false |\n| background-color  | 菜单的背景色（仅支持 hex 格式） | string |   —   | #ffffff |\n| text-color  | 菜单的文字颜色（仅支持 hex 格式） | string |   —   | #303133 |\n| active-text-color  | 当前激活菜单的文字颜色（仅支持 hex 格式） | string |   —   | #409EFF |\n| default-active | 当前激活菜单的 index | string    | — | — |\n| default-openeds | 当前打开的 sub-menu 的 index 的数组 | Array    | — | — |\n| unique-opened  | 是否只保持一个子菜单的展开 | boolean   | — | false   |\n| menu-trigger  | 子菜单打开的触发方式(只在 mode 为 horizontal 时有效) | string   | hover / click | hover |\n| router  | 是否使用 vue-router 的模式，启用该模式会在激活导航时以 index 作为 path 进行路由跳转 | boolean   | — | false   |\n| collapse-transition  | 是否开启折叠动画 | boolean   | — | true   |\n\n### Menu Methods\n| 方法名称      | 说明    | 参数      |\n|---------- |-------- |---------- |\n| open  | 展开指定的 sub-menu | index: 需要打开的 sub-menu 的 index |\n| close  | 收起指定的 sub-menu | index: 需要收起的 sub-menu 的 index |\n\n### Menu Events\n| 事件名称      | 说明    | 回调参数      |\n|---------- |-------- |---------- |\n| select  | 菜单激活回调 | index: 选中菜单项的 index, indexPath: 选中菜单项的 index path  |\n| open  | sub-menu 展开的回调 | index: 打开的 sub-menu 的 index， indexPath: 打开的 sub-menu 的 index path  |\n| close  | sub-menu 收起的回调 | index: 收起的 sub-menu 的 index， indexPath: 收起的 sub-menu 的 index path  |\n\n### SubMenu Attribute\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| index     | 唯一标志   | string/null  | — | null |\n| popper-class | 弹出菜单的自定义类名 | string | — | — |\n| show-timeout | 展开 sub-menu 的延时 | number | — | 300 |\n| hide-timeout | 收起 sub-menu 的延时 | number | — | 300 |\n| disabled  | 是否禁用 | boolean | — | false |\n| popper-append-to-body | 是否将弹出菜单插入至 body 元素。在菜单的定位出现问题时，可尝试修改该属性 | boolean | — | 一级子菜单：true / 非一级子菜单：false |\n\n### Menu-Item Attribute\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| index     | 唯一标志   | string  | — | — |\n| route     | Vue Router 路径对象 | Object | — | — |\n| disabled  | 是否禁用 | boolean | — | false |\n\n### Menu-Group Attribute\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| title     | 分组标题   | string  | — | — |\n","el-migration-to-next":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/migrationToNext](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/migrationToNext) \n     t升级指南\n\n早在2017年京东使用ElementUI二开的组件库`@jd/element-ui`，被部分业务线使用，并且UED设计也没有包含组件的概念以及组件库联动，多是以页面为中心各业务线进行开发。\n本指南提供从`@jd/element-ui`到新组件库`@jdcloud/jelement-next`的升级说明。\n\n\n以下每步建议commit一次。\n\n* 升级Vue版本到2.6.14+ , 建议使用CDN地址 https://j.jdcloud.com/lib/vue-2.6.14/vue.min.js \n* 将原组件库`@jd/element-ui`替换为`@jdcloud/jelement-next`，建议使用CDN地址 https://j.jdcloud.com/jelement-next/lib/index.js\n* 将原组件样式文件 https://j.jdcloud.com/console-theme/index.css 替换为新的主题样式文件 https://j.jdcloud.com/jelement-next/ui-default/lib/index.css\n* 如果你的项目使用了公有云业务组件库 http://pro.tangram.jdcloud.com/docs/zh/components/quickstart.html ，需要将业务组件库升级到`@jdcloud/jelement-biz@next`\n* 使用upgrade工具自动升级组件的不兼容变动 https://git.jd.com/JDCloud-FE/jelement-upgrade/blob/master/upgrade.md 。有些工具无法自动处理的问题会有提示，需要手动变更。\n* 引入模板的样式文件https://j.jdcloud.com/jelement-next/ui-template/lib/index.css，参照新的模板重构你项目中的页面https://j.jdcloud.com/jelement-next/ui-template/doc-dist/detail/basic.html 。（注意，模板样式包含基本列表详情等页面的结构，但是有些样式是业务强相关的没有包含在模板的样式文件中，比如列表模板顶部input框使用了w-180px来设定宽度，这个宽度具体业务线会有区别，所以这样的宽度需要你在自己的项目中处理。这里模板中使用的w-180px等className，使用的是https://windicss.org/ ， 建议你在自己的项目中也引入windicss，这样模板复制到你的项目中时，可直接生效。\n* 项目中原来使用的$jcAlert,$jcNotify 都要按新组件的名字调用 $Alert $Notify\n\n## 替换新组件库新模板的其他注意事项\n* 用了windi的话，他默认的box-sizing是border-box，可能对的自己的页面造成一些影响，需要你自己评估。你也可以去掉这个默认配置\n* table cell的padding变了，需要自行Review调整Table宽度\n* alert组件提示文字，之前type=info是黄色的，现在info是蓝色，其实你应该用type=warning才对，建议你改一下\n* drowdown组件 下拉箭头的图标，从jc-icon-caret-bottom更换为el-icon-arrow-down \n","el-notification":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/notification](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/notification) \n     cation 通知\n\n悬浮出现在页面角落，显示全局的通知提醒消息。\n\n### 基本用法\n\n适用性广泛的通知栏\n\n:::demo Notification 组件提供通知功能，Element 注册了`$notify`方法，接收一个`options`字面量参数，在最简单的情况下，你可以设置`title`字段和`message`字段，用于设置通知的标题和正文。默认情况下，经过一段时间后 Notification 组件会自动关闭，但是通过设置`duration`，可以控制关闭的时间间隔，特别的是，如果设置为`0`，则不会自动关闭。注意：`duration`接收一个`Number`，单位为毫秒，默认为`4500`。\n```html\n<template>\n  <el-button\n    plain\n    @click=\"open1\">\n    可自动关闭\n  </el-button>\n  <el-button\n    plain\n    @click=\"open2\">\n    不会自动关闭\n    </el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open1() {\n        const h = this.$createElement;\n\n        this.$notify({\n          title: '标题名称',\n          message: h('i', { style: 'color: teal'}, '这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案')\n        });\n      },\n\n      open2() {\n        this.$notify({\n          title: '提示',\n          message: '这是一条不会自动关闭的消息',\n          duration: 0\n        });\n      }\n    }\n  }\n</script>\n```\n:::\n\n### 带有倾向性\n\n带有 icon，常用来显示「成功、警告、消息、错误」类的系统消息\n\n:::demo Element 为 Notification 组件准备了四种通知类型：`success`, `warning`, `info`, `error`。通过`type`字段来设置，除此以外的值将被忽略。同时，我们也为 Notification 的各种 type 注册了方法，可以在不传入`type`字段的情况下像`open3`和`open4`那样直接调用。\n```html\n<template>\n  <el-button\n    plain\n    @click=\"open1\">\n    成功\n  </el-button>\n  <el-button\n    plain\n    @click=\"open2\">\n    警告\n  </el-button>\n  <el-button\n    plain\n    @click=\"open3\">\n    消息\n  </el-button>\n  <el-button\n    plain\n    @click=\"open4\">\n    错误\n  </el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open1() {\n        this.$notify({\n          title: '成功',\n          message: '这是一条成功的提示消息',\n          type: 'success'\n        });\n      },\n\n      open2() {\n        this.$notify({\n          title: '警告',\n          message: '这是一条警告的提示消息',\n          type: 'warning'\n        });\n      },\n\n      open3() {\n        this.$notify.info({\n          title: '消息',\n          message: '这是一条消息的提示消息'\n        });\n      },\n\n      open4() {\n        this.$notify.error({\n          title: '错误',\n          message: '这是一条错误的提示消息'\n        });\n      }\n    }\n  }\n</script>\n```\n:::\n\n### 自定义弹出位置\n\n可以让 Notification 从屏幕四角中的任意一角弹出\n\n:::demo 使用`position`属性定义 Notification 的弹出位置，支持四个选项：`top-right`、`top-left`、`bottom-right`、`bottom-left`，默认为`top-right`。\n```html\n<template>\n  <el-button\n    plain\n    @click=\"open1\">\n    右上角\n  </el-button>\n  <el-button\n    plain\n    @click=\"open2\">\n    右下角\n  </el-button>\n  <el-button\n    plain\n    @click=\"open3\">\n    左下角\n  </el-button>\n  <el-button\n    plain\n    @click=\"open4\">\n    左上角\n  </el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open1() {\n        this.$notify({\n          title: '自定义位置',\n          message: '右上角弹出的消息'\n        });\n      },\n\n      open2() {\n        this.$notify({\n          title: '自定义位置',\n          message: '右下角弹出的消息',\n          position: 'bottom-right'\n        });\n      },\n\n      open3() {\n        this.$notify({\n          title: '自定义位置',\n          message: '左下角弹出的消息',\n          position: 'bottom-left'\n        });\n      },\n\n      open4() {\n        this.$notify({\n          title: '自定义位置',\n          message: '左上角弹出的消息',\n          position: 'top-left'\n        });\n      }\n    }\n  }\n</script>\n```\n:::\n\n### 带有偏移\n\n让 Notification 偏移一些位置\n\n:::demo Notification 提供设置偏移量的功能，通过设置 `offset` 字段，可以使弹出的消息距屏幕边缘偏移一段距离。注意在同一时刻，所有的 Notification 实例应当具有一个相同的偏移量。\n```html\n<template>\n  <el-button\n    plain\n    @click=\"open\">\n    偏移的消息\n  </el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$notify({\n          title: '偏移',\n          message: '这是一条带有偏移的提示消息',\n          offset: 100\n        });\n      }\n    }\n  }\n</script>\n```\n:::\n\n### 使用 HTML 片段\n`message` 属性支持传入 HTML 片段\n\n:::demo 将`dangerouslyUseHTMLString`属性设置为 true，`message` 就会被当作 HTML 片段处理。\n```html\n<template>\n  <el-button\n    plain\n    @click=\"open\">\n    使用 HTML 片段\n  </el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$notify({\n          title: 'HTML 片段',\n          dangerouslyUseHTMLString: true,\n          message: '<strong>这是 <i>HTML</i> 片段</strong>'\n        });\n      }\n    }\n  }\n</script>\n```\n:::\n\n:::warning\n`message` 属性虽然支持传入 HTML 片段，但是在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 [XSS 攻击](https://en.wikipedia.org/wiki/Cross-site_scripting)。因此在 `dangerouslyUseHTMLString` 打开的情况下，请确保 `message` 的内容是可信的，**永远不要**将用户提交的内容赋值给 `message` 属性。\n:::\n\n### 隐藏关闭按钮\n\n可以不显示关闭按钮\n\n:::demo 将`showClose`属性设置为`false`即可隐藏关闭按钮。\n```html\n<template>\n  <el-button\n    plain\n    @click=\"open\">\n    隐藏关闭按钮\n  </el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$notify.success({\n          title: 'Info',\n          message: '这是一条没有关闭按钮的消息',\n          showClose: false\n        });\n      }\n    }\n  }\n</script>\n```\n:::\n\n### 全局方法\n\nElement 为 `Vue.prototype` 添加了全局方法 `$notify`。因此在 vue instance 中可以采用本页面中的方式调用 Notification。\n\n### 单独引用\n\n单独引入 Notification：\n\n```javascript\nimport { Notification } from 'element-ui';\n```\n\n此时调用方法为 `Notification(options)`。我们也为每个 type 定义了各自的方法，如 `Notification.success(options)`。并且可以调用 `Notification.closeAll()` 手动关闭所有实例。\n\n### Options\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| title | 标题 | string | — | — |\n| message | 说明文字 | string/Vue.VNode | — | — |\n| dangerouslyUseHTMLString | 是否将 message 属性作为 HTML 片段处理 | boolean | — | false |\n| type | 主题样式，如果不在可选值内将被忽略 | string | success/warning/info/error | — |\n| iconClass | 自定义图标的类名。若设置了 `type`，则 `iconClass` 会被覆盖 | string | — | — |\n| customClass | 自定义类名 | string | — | — |\n| duration | 显示时间, 毫秒。设为 0 则不会自动关闭 | number | — | 4500 |\n| position | 自定义弹出位置 | string | top-right/top-left/bottom-right/bottom-left | top-right |\n| showClose | 是否显示关闭按钮 | boolean | — | true |\n| onClose | 关闭时的回调函数 | function | — | — |\n| onClick | 点击 Notification 时的回调函数 | function | — | — |\n| offset | 偏移的距离，在同一时刻，所有的 Notification 实例应当具有一个相同的偏移量 | number | — | 0 |\n\n### 方法\n调用 `Notification` 或 `this.$notify` 会返回当前 Notification 的实例。如果需要手动关闭实例，可以调用它的 `close` 方法。\n| 方法名 | 说明 |\n| ---- | ---- |\n| close | 关闭当前的 Notification |\n","el-page-header":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/page-header](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/page-header) \n     \n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |------------------------------ | ------ |\n| title     | 标题           | string    |  —                            | 标题   |\n| content   | 内容           | string    |  —                            | —      |\n| show-back-icon   | 是否显示返回icon           | boolean    |  —                            | false      |\n\n\n### Events\n| 事件名称   | 说明           | 回调参数   |\n|---------- |-------------- |---------- |\n| back      | 点击左侧区域触发 | —        |\n\n### Slots\n| 事件名称    | 说明         |\n|---------- |------------- |\n| title     | 标题内容      |\n| content   | 内容         |\n","el-pagination":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/pagination](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/pagination) \n     \n| 参数               | 说明                                                     | 类型              | 可选值      | 默认值 |\n|--------------------|----------------------------------------------------------|-------------------|-------------|--------|\n| small | 是否使用小型分页样式 | boolean | — | false |\n| background | 是否为分页按钮添加背景色 | boolean | — | true |\n| page-size | 每页显示条目个数，支持 .sync 修饰符 | number | — | 10 |\n| total | 总条目数 | number | — | — |\n| page-count | 总页数，total 和 page-count 设置任意一个就可以达到显示页码的功能；如果要支持 page-sizes 的更改，则需要使用 total 属性 | Number | — | — |\n| pager-count | 页码按钮的数量，当总页数超过该值时会折叠 | number | 大于等于 5 且小于等于 21 的奇数 | 7 |\n| current-page | 当前页数，支持 .sync 修饰符 | number | — | 1 |\n| layout | 组件布局，子组件名用逗号分隔| String | `sizes`, `prev`, `pager`, `next`, `jumper`, `->`, `total`, `slot` | 'prev, pager, next, jumper, ->, total'  |\n| page-sizes | 每页显示个数选择器的选项设置 | number[] | — |  [10, 20, 30, 40, 50, 100] |\n| popper-class | 每页显示个数选择器的下拉框类名 | string | — | — |\n| prev-text | 替代图标显示的上一页文字 | string | — | — |\n| next-text | 替代图标显示的下一页文字 | string | — | — |\n| disabled | 是否禁用 | boolean | — | false |\n| hide-on-single-page | 只有一页时是否隐藏 | boolean | — | - |\n\n### Events\n| 事件名称 | 说明 | 回调参数 |\n|---------|--------|---------|\n| size-change | pageSize 改变时会触发 | 每页条数 |\n| current-change | currentPage 改变时会触发 | 当前页 |\n| prev-click | 用户点击上一页按钮改变当前页后触发 | 当前页 |\n| next-click | 用户点击下一页按钮改变当前页后触发 | 当前页 |\n\n### Slot\n| name | 说明 |\n|------|--------|\n| — | 自定义内容，需要在 `layout` 中列出 `slot` |\n","el-popconfirm":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/popconfirm](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/popconfirm) \n     \n| 参数               | 说明                                                     | 类型              | 可选值      | 默认值 |\n|--------------------|----------------------------------------------------------|-------------------|-------------|--------|\n|  title              | 标题 | String | — | — |\n|  confirm-button-text              | 确认按钮文字 | String | — | — |\n|  cancel-button-text              | 取消按钮文字 | String | — | — |\n|  confirm-button-type              | 确认按钮类型 | String | — | Primary |\n|  cancel-button-type              | 取消按钮类型 | String | — | Text |\n|  icon              | Icon | String | — | el-icon-question |\n|  icon-color              | Icon 颜色 | String | — | #f90 |\n|  hide-icon              | 是否隐藏 Icon | Boolean | — | false |\n\n### Slot\n| 参数 | 说明 |\n|--- | ---|\n| reference | 触发 Popconfirm 显示的 HTML 元素 |\n\n### Events\n| 事件名称 | 说明 | 回调参数 |\n|---------|--------|---------|\n| confirm | 点击确认按钮时触发 | — |\n| cancel | 点击取消按钮时触发 | — |","el-popover":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/popover](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/popover) \n     \n| 参数               | 说明                                                     | 类型              | 可选值      | 默认值 |\n|--------------------|----------------------------------------------------------|-------------------|-------------|--------|\n| trigger | 触发方式 | String  | click/focus/hover/manual |    click    |\n|  title              | 标题 | String | — | — |\n|  content        |  显示的内容，也可以通过 `slot` 传入 DOM   | String            | — | — |\n|  width        |  宽度  | String, Number            | — | 最小宽度 150px |\n|  placement        |  出现位置  | String | top/top-start/top-end/bottom/bottom-start/bottom-end/left/left-start/left-end/right/right-start/right-end |  bottom |\n|  disabled       |  Popover 是否可用  | Boolean           | — |  false |\n|  value / v-model        |  状态是否可见  | Boolean           | — |  false |\n|  offset        |  出现位置的偏移量  | Number           | — |  0 |\n|  transition     |  定义渐变动画      | String             | — | fade-in-linear |\n|  visible-arrow   |  是否显示 Tooltip 箭头，更多参数可见[Vue-popper](https://github.com/element-component/vue-popper) | Boolean | — | true |\n|  popper-options        | [popper.js](https://popper.js.org/documentation.html) 的参数 | Object            | 参考 [popper.js](https://popper.js.org/documentation.html) 文档 | `{ boundariesElement: 'body', gpuAcceleration: false }` |\n| popper-class | 为 popper 添加类名 | String | — | — |\n| open-delay | 触发方式为 hover 时的显示延迟，单位为毫秒 | Number | — | — |\n| close-delay | 触发方式为 hover 时的隐藏延迟，单位为毫秒 | number | — | 200 |\n| tabindex   | Popover 组件的 [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) | number | — | 0 |\n\n### Slot\n| 参数 | 说明 |\n|--- | ---|\n| — | Popover 内嵌 HTML 文本 |\n| reference | 触发 Popover 显示的 HTML 元素 |\n\n### Events\n| 事件名称 | 说明 | 回调参数 |\n|---------|--------|---------|\n| show | 显示时触发 | — |\n| after-enter | 显示动画播放完毕后触发 | — |\n| hide | 隐藏时触发 | — |\n| after-leave | 隐藏动画播放完毕后触发 | — |\n","el-progress":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/progress](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/progress) \n     \n| 参数          | 说明            | 类型            | 可选值                 | 默认值   |\n|-------------  |---------------- |---------------- |---------------------- |-------- |\n| **percentage** | **百分比（必填）**   | number         |     0-100          |     0    |\n| type          | 进度条类型           | string         | line/circle/dashboard | line |\n| status  | 进度条当前状态 | string | success/exception/warning | — |\n| color  | 进度条背景色（会覆盖 status 状态颜色） | string/function/array | — | '' |\n| width  | 环形进度条画布宽度（只在 type 为 circle 或 dashboard 时可用） | number |  | 126 |\n| show-text  | 是否显示进度条文字内容 | boolean | — | true |\n| stroke-linecap  | circle/dashboard 类型路径两端的形状 | string | butt/round/square | round |\n| format  | 指定进度条文字内容 | function(percentage) | — | — |","el-quickstart":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/quickstart](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/quickstart) \n     本节将介绍如何在项目中使用 JElement。\n\n### 使用 Starter Kit\n\n我们提供了通用的[项目模板](https://git.jd.com/JDCloud-FE/JDCloud-Console)，你可以直接使用。如果不希望使用我们提供的模板，请继续阅读。\n\n### 引入 JElement\n\n你可以引入整个 JElement，或是根据需要仅引入部分组件。我们先介绍如何引入完整的 JElement。\n\n#### 完整引入\n\n在 main.js 中写入以下内容：\n\n```javascript\nimport Vue from 'vue';\nimport ElementUI from '@jdcloud/jelement-next';\nimport '@jdcloud/jelement-ui-default/lib/index.css';\nimport App from './App.vue';\n\nVue.use(ElementUI);\n\nnew Vue({\n  el: '#app',\n  render: h => h(App)\n});\n```\n\n以上代码便完成了 JElement 的引入。需要注意的是，样式文件需要单独引入。\n\n#### 按需引入\n\n借助 [babel-plugin-component](https://github.com/QingWei-Li/babel-plugin-component)，我们可以只引入需要的组件，以达到减小项目体积的目的。\n\n首先，安装 babel-plugin-component：\n\n```bash\nnpm install babel-plugin-component -D\n```\n\n然后，将 .babelrc 修改为：\n\n```json\n{\n  \"presets\": [[\"es2015\", { \"modules\": false }]],\n  \"plugins\": [\n    [\n      \"component\",\n      {\n        \"libraryName\": \"@jdcloud/jelement-next\",\n        \"style\": false\n      }\n    ]\n  ]\n}\n```\n\n接下来，如果你只希望引入部分组件，比如 Button 和 Select，那么需要在 main.js 中写入以下内容：\n\n```javascript\nimport Vue from 'vue';\nimport { Button, Select } from '@jdcloud/jelement-next';\nimport '@jdcloud/jelement-ui-default/lib/index.css';\nimport App from './App.vue';\n\nVue.component(Button.name, Button);\nVue.component(Select.name, Select);\n/* 或写为\n * Vue.use(Button)\n * Vue.use(Select)\n */\n\nnew Vue({\n  el: '#app',\n  render: h => h(App)\n});\n```\n\n完整组件列表和引入方式（完整组件列表以 [components.json](https://git.jd.com/JDCloud-FE/jelement-next/blob/master/components.json) 为准）\n\n```javascript\nimport Vue from 'vue';\nimport {\n  Pagination,\n  Dialog,\n  Autocomplete,\n  Dropdown,\n  DropdownMenu,\n  DropdownItem,\n  Menu,\n  Submenu,\n  MenuItem,\n  MenuItemGroup,\n  Input,\n  InputNumber,\n  Radio,\n  RadioGroup,\n  RadioButton,\n  Checkbox,\n  CheckboxButton,\n  CheckboxGroup,\n  Switch,\n  Select,\n  Option,\n  OptionGroup,\n  Button,\n  ButtonGroup,\n  Table,\n  TableColumn,\n  DatePicker,\n  TimeSelect,\n  TimePicker,\n  Popover,\n  Tooltip,\n  Breadcrumb,\n  BreadcrumbItem,\n  Form,\n  FormItem,\n  Tabs,\n  TabPane,\n  Tag,\n  Tree,\n  Alert,\n  Slider,\n  Icon,\n  Row,\n  Col,\n  Upload,\n  Progress,\n  Spinner,\n  Badge,\n  Card,\n  Rate,\n  Steps,\n  Step,\n  Carousel,\n  CarouselItem,\n  Collapse,\n  CollapseItem,\n  Cascader,\n  ColorPicker,\n  Transfer,\n  Container,\n  Header,\n  Aside,\n  Main,\n  Footer,\n  Timeline,\n  TimelineItem,\n  Link,\n  Divider,\n  Image,\n  Calendar,\n  Backtop,\n  PageHeader,\n  CascaderPanel,\n  Loading,\n  MessageBox,\n  Message,\n  Notification\n} from '@jdcloud/jelement-next';\nimport '@jdcloud/jelement-ui-default/lib/index.css';\n\nVue.use(Pagination);\nVue.use(Dialog);\nVue.use(Autocomplete);\nVue.use(Dropdown);\nVue.use(DropdownMenu);\nVue.use(DropdownItem);\nVue.use(Menu);\nVue.use(Submenu);\nVue.use(MenuItem);\nVue.use(MenuItemGroup);\nVue.use(Input);\nVue.use(InputNumber);\nVue.use(Radio);\nVue.use(RadioGroup);\nVue.use(RadioButton);\nVue.use(Checkbox);\nVue.use(CheckboxButton);\nVue.use(CheckboxGroup);\nVue.use(Switch);\nVue.use(Select);\nVue.use(Option);\nVue.use(OptionGroup);\nVue.use(Button);\nVue.use(ButtonGroup);\nVue.use(Table);\nVue.use(TableColumn);\nVue.use(DatePicker);\nVue.use(TimeSelect);\nVue.use(TimePicker);\nVue.use(Popover);\nVue.use(Tooltip);\nVue.use(Breadcrumb);\nVue.use(BreadcrumbItem);\nVue.use(Form);\nVue.use(FormItem);\nVue.use(Tabs);\nVue.use(TabPane);\nVue.use(Tag);\nVue.use(Tree);\nVue.use(Alert);\nVue.use(Slider);\nVue.use(Icon);\nVue.use(Row);\nVue.use(Col);\nVue.use(Upload);\nVue.use(Progress);\nVue.use(Spinner);\nVue.use(Badge);\nVue.use(Card);\nVue.use(Rate);\nVue.use(Steps);\nVue.use(Step);\nVue.use(Carousel);\nVue.use(CarouselItem);\nVue.use(Collapse);\nVue.use(CollapseItem);\nVue.use(Cascader);\nVue.use(ColorPicker);\nVue.use(Transfer);\nVue.use(Container);\nVue.use(Header);\nVue.use(Aside);\nVue.use(Main);\nVue.use(Footer);\nVue.use(Timeline);\nVue.use(TimelineItem);\nVue.use(Link);\nVue.use(Divider);\nVue.use(Image);\nVue.use(Calendar);\nVue.use(Backtop);\nVue.use(PageHeader);\nVue.use(CascaderPanel);\n\nVue.use(Loading.directive);\n\nVue.prototype.$loading = Loading.service;\nVue.prototype.$msgbox = MessageBox;\nVue.prototype.$alert = MessageBox.alert;\nVue.prototype.$confirm = MessageBox.confirm;\nVue.prototype.$prompt = MessageBox.prompt;\nVue.prototype.$notify = Notification;\nVue.prototype.$message = Message;\n```\n\n### 全局配置\n\n在引入 JElement 时，可以传入一个全局配置对象。该对象目前支持 `size` 与 `zIndex` 字段。`size` 用于改变组件的默认尺寸，`zIndex` 设置弹框的初始 z-index（默认值：2000）。按照引入 JElement 的方式，具体操作如下：\n\n完整引入 Element：\n\n```js\nimport Vue from 'vue';\nimport Element from '@jdcloud/jelement-next';\nimport '@jdcloud/jelement-ui-default/lib/index.css';\nVue.use(Element, { size: 'small', zIndex: 3000 });\n```\n\n按需引入 Element：\n\n```js\nimport Vue from 'vue';\nimport { Button } from '@jdcloud/jelement-next';\nimport '@jdcloud/jelement-ui-default/lib/index.css';\n\nVue.prototype.$ELEMENT = { size: 'small', zIndex: 3000 };\nVue.use(Button);\n```\n\n按照以上设置，项目中所有拥有 `size` 属性的组件的默认尺寸均为 'small'，弹框的初始 z-index 为 3000。\n\n### 开始使用\n\n至此，一个基于 Vue 和 JElement 的开发环境已经搭建完毕，现在就可以编写代码了。各个组件的使用方法请参阅它们各自的文档。","el-radio":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/radio](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/radio) \n     \n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| value / v-model | 绑定值 | string / number / boolean | — | — |\n| label     | Radio 的 value   | string / number / boolean    |       —        |      —   |\n| disabled  | 是否禁用    | boolean   | — | false   |\n| name | 原生 name 属性 | string    |      —         |     —    |\n\n### Radio Events\n| 事件名称 | 说明 | 回调参数 |\n|---------- |-------- |---------- |\n| change  | 绑定值变化时触发的事件 |  选中的 Radio label 值  |\n\n### Radio-group Attributes\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| value / v-model | 绑定值 | string / number / boolean | — | — |\n| size     | 单选框组尺寸，仅对按钮形式的 Radio 或带有边框的 Radio 有效   | string  | medium / small |    —     |\n| disabled  | 是否禁用    | boolean   | — | false   |\n| text-color  | 按钮形式的 Radio 激活时的文本颜色    | string   | — | #ffffff   |\n| fill  | 按钮形式的 Radio 激活时的填充色和边框色    | string   | — | #409EFF   |\n\n### Radio-group Events\n| 事件名称 | 说明 | 回调参数 |\n|---------- |-------- |---------- |\n| change  | 绑定值变化时触发的事件 |  选中的 Radio label 值  |\n\n### Radio-button Attributes\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| label     | Radio 的 value  | string / number  |        —       |     —    |\n| disabled  | 是否禁用    | boolean   | — | false   |\n| name | 原生 name 属性 | string    |      —         |     —    |\n","el-rate":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/rate](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/rate) \n     \n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| value / v-model | 绑定值 | number | — | 0 |\n| max | 最大分值 | number | — | 5 |\n| disabled | 是否为只读 | boolean | — | false |\n| allow-half | 是否允许半选 | boolean | — | false |\n| low-threshold | 低分和中等分数的界限值，值本身被划分在低分中 | number | — | 2 |\n| high-threshold | 高分和中等分数的界限值，值本身被划分在高分中 | number | — | 4 |\n| colors | icon 的颜色。若传入数组，共有 3 个元素，为 3 个分段所对应的颜色；若传入对象，可自定义分段，键名为分段的界限值，键值为对应的颜色 | array/object | — | ['#F7BA2A', '#F7BA2A', '#F7BA2A'] |\n| void-color | 未选中 icon 的颜色 | string | — | #C6D1DE |\n| disabled-void-color | 只读时未选中 icon 的颜色 | string | — | #EFF2F7 |\n| icon-classes | icon 的类名。若传入数组，共有 3 个元素，为 3 个分段所对应的类名；若传入对象，可自定义分段，键名为分段的界限值，键值为对应的类名 | array/object | — | ['el-icon-star-on', 'el-icon-star-on','el-icon-star-on'] |\n| void-icon-class | 未选中 icon 的类名 | string | — | el-icon-star-off |\n| disabled-void-icon-class | 只读时未选中 icon 的类名 | string | — | el-icon-star-on |\n| show-text | 是否显示辅助文字，若为真，则会从 texts 数组中选取当前分数对应的文字内容 | boolean | — | false |\n| show-score | 是否显示当前分数，show-score 和 show-text 不能同时为真 | boolean | — | false |\n| text-color | 辅助文字的颜色 | string | — | #1F2D3D |\n| texts | 辅助文字数组 | array | — | ['极差', '失望', '一般', '满意', '惊喜'] |\n| score-template | 分数显示模板 | string | — | {value} |\n\n### Events\n| 事件名称      | 说明    | 回调参数      |\n|---------- |-------- |---------- |\n| change | 分值改变时触发 | 改变后的分值 |\n\n","el-result":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/result](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/result) \n     \n\n| 参数          | 说明            | 类型            | 可选值                 | 默认值   |\n|-------------  |---------------- |---------------- |---------------------- |-------- |\n| title          | 标题         | string  |          —             |    —     |\n| sub-title    | 二级标题  | string | — |    —  |\n| icon  | 图标类型    | string  |    success / warning / info / error  |  info |\n\n### Result Slots\n\n| Name | 说明 |\n|------|--------|\n| icon | 自定义图标  |\n| title | 自定义标题     |\n| subTitle | 自定义二级标题     |\n| extra | 自定义底部额外区域     |\n","el-select":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/select](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/select) \n     \n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| value / v-model | 绑定值 | boolean / string / number | — | — |\n| multiple | 是否多选 | boolean | — | false |\n| disabled | 是否禁用 | boolean | — | false |\n| value-key | 作为 value 唯一标识的键名，绑定值为对象类型时必填 | string | — | value |\n| size | 输入框尺寸 | string | small | — |\n| clearable | 是否可以清空选项 | boolean | — | false |\n| collapse-tags | 多选时是否将选中值按文字的形式展示 | boolean | — | false |\n| multiple-limit | 多选时用户最多可以选择的项目数，为 0 则不限制 | number | — | 0 |\n| name | select input 的 name 属性 | string | — | — |\n| autocomplete | select input 的 autocomplete 属性 | string | — | off |\n| auto-complete | 下个主版本弃用 | string | — | off |\n| placeholder | 占位符 | string | — | 请选择 |\n| filterable | 是否可搜索 | boolean | — | false |\n| allow-create | 是否允许用户创建新条目，需配合 `filterable` 使用 | boolean | — | false |\n| filter-method | 自定义搜索方法 | function | — | — |\n| remote | 是否为远程搜索 | boolean | — | false |\n| remote-method | 远程搜索方法 | function | — | — |\n| loading | 是否正在从远程获取数据 | boolean | — | false |\n| loading-text | 远程加载时显示的文字 | string | — | 加载中 |\n| no-match-text | 搜索条件无匹配时显示的文字，也可以使用`slot=\"empty\"`设置 | string | — | 无匹配数据 |\n| no-data-text | 选项为空时显示的文字，也可以使用`slot=\"empty\"`设置 | string | — | 无数据 |\n| popper-class | Select 下拉框的类名 | string | — | — |\n| reserve-keyword | 多选且可搜索时，是否在选中一个选项后保留当前的搜索关键词 | boolean | — | false |\n| default-first-option | 在输入框按下回车，选择第一个匹配项。需配合 `filterable` 或 `remote` 使用 | boolean | - | false |\n| popper-append-to-body | 是否将弹出框插入至 body 元素。在弹出框的定位出现问题时，可将该属性设置为 false | boolean | - | true |\n| automatic-dropdown | 对于不可搜索的 Select，是否在输入框获得焦点后自动弹出选项菜单 | boolean | - | false |\n\n### Select Events\n| 事件名称 | 说明 | 回调参数 |\n|---------|---------|---------|\n| change | 选中值发生变化时触发 | 目前的选中值 |\n| visible-change | 下拉框出现/隐藏时触发 | 出现则为 true，隐藏则为 false |\n| remove-tag | 多选模式下移除tag时触发 | 移除的tag值 |\n| clear | 可清空的单选模式下用户点击清空按钮时触发 | — |\n| blur | 当 input 失去焦点时触发 | (event: Event) |\n| focus | 当 input 获得焦点时触发 | (event: Event) |\n\n### Select Slots\n|   name  | 说明     |\n|---------|---------|\n|    —    | Option 组件列表 |\n| prefix  | Select 组件头部内容 |\n| empty | 无选项时的列表 |\n### Option Attributes\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| value | 选项的值 | string/number/object | — | — |\n| label | 选项的标签，若不设置则默认与 `value` 相同 | string/number | — | — |\n| disabled | 是否禁用该选项 | boolean | — | false |\n\n### Option Group Attributes\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| label | 分组的组名 | string | — | — |\n| disabled | 是否将该分组下所有选项置为禁用 | boolean | — | false |\n### Methods\n| 方法名 | 说明 | 参数 |\n| ---- | ---- | ---- |\n| focus | 使 input 获取焦点 | - |\n| blur | 使 input 失去焦点，并隐藏下拉框 | - |\n","el-skeleton":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/skeleton](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/skeleton) \n     \n\n| 参数     | 说明                                        | 类型    | 可选值       | 默认值 |\n| -------- | ------------------------------------------- | ------- | ------------ | ------ |\n| animated | 是否使用动画                                | boolean | true / false | false  |\n| count    | 渲染多少个 template, 建议使用尽可能小的数字 | number  | integer      | 1      |\n| loading  | 是否显示 skeleton 骨架屏                    | boolean | true / false | true |\n| rows     | 骨架屏段落数量                              | number  | 正整数       | 4      |\n| throttle | 延迟占位 DOM 渲染的时间, 单位是毫秒         | number  | 正整数       | 0      |\n\n### Skeleton Item Attributes\n\n| 参数    | 说明                     | 类型         | 可选值                                                               | 默认值 |\n| ------- | ------------------------ | ------------ | -------------------------------------------------------------------- | ------ |\n| variant | 当前显示的占位元素的样式 | Enum(string) | p / text / h1 / h3 / text / caption / button / image / circle / rect | text   |\n\n### Skeleton Slots\n\n| name     | description          |\n| -------- | -------------------- |\n| default  | \b用来展示真实 UI     |\n| template | 用来展示自定义占位符 |\n","el-skeleton-item":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/skeleton#skeleton-item-attributes](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/skeleton#skeleton-item-attributes) \n     \n\n| 参数    | 说明                     | 类型         | 可选值                                                               | 默认值 |\n| ------- | ------------------------ | ------------ | -------------------------------------------------------------------- | ------ |\n| variant | 当前显示的占位元素的样式 | Enum(string) | p / text / h1 / h3 / text / caption / button / image / circle / rect | text   |\n\n### Skeleton Slots\n\n| name     | description          |\n| -------- | -------------------- |\n| default  | \b用来展示真实 UI     |\n| template | 用来展示自定义占位符 |\n","el-slider":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/slider](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/slider) \n     \n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| value / v-model | 绑定值 | number | — | 0 |\n| min | 最小值 | number | — | 0 |\n| max | 最大值 | number | — | 100 |\n| disabled | 是否禁用 | boolean | — | false |\n| step | 步长 | number | — | 1 |\n| show-input | 是否显示输入框，仅在非范围选择时有效 | boolean | — | false |\n| show-input-controls | 在显示输入框的情况下，是否显示输入框的控制按钮 | boolean | — | true |\n| input-size | 输入框的尺寸 | string | medium / small  | small |\n| show-stops | 是否显示间断点 | boolean | — | false |\n| show-tooltip | 是否显示 tooltip | boolean | — | true |\n| format-tooltip | 格式化 tooltip message | function(value) | — | — |\n| range | 是否为范围选择 | boolean | — | false |\n| height | Slider 高度，竖向模式时必填 | string | — | — |\n| label | 屏幕阅读器标签 | string | — | — |\n| debounce | 输入时的去抖延迟，毫秒，仅在`show-input`等于true时有效 | number | — | 300 |\n| tooltip-class | tooltip 的自定义类名 | string | — | — |\n| marks | 标记， key 的类型必须为 number 且取值在闭区间 `[min, max]` 内，每个标记可以单独设置样式 | object | — | — |\n\n### Events\n| 事件名称      | 说明    | 回调参数      |\n|---------- |-------- |---------- |\n| change | 值改变时触发（使用鼠标拖曳时，只在松开鼠标后触发） | 改变后的值 |\n| input | 数据改变时触发（使用鼠标拖曳时，活动过程实时触发） | 改变后的值 |\n","el-steps":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/steps](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/steps) \n     \n\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| space | 每个 step 的间距，不填写将自适应间距。支持百分比。 | number / string | — | — |\n| direction | 显示方向 | string | vertical/horizontal | horizontal |\n| active | 设置当前激活步骤  | number | — | 0 |\n| process-status | 设置当前步骤的状态 | string | wait / process / finish / error / success | process |\n| finish-status | 设置结束步骤的状态 | string | wait / process / finish / error / success | finish |\n| align-center | 进行居中对齐 | boolean | - | false |\n| simple | 是否应用简洁风格 | boolean | - | false |\n\n### Step Attributes\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| title | 标题 | string | — | — |\n| description | 描述性文字 | string | — | — |\n| icon | 图标 | 传入 icon 的 class 全名来自定义 icon，也支持 slot 方式写入 | string | — |\n| status | 设置当前步骤的状态，不设置则根据 steps 确定状态 | wait / process / finish / error / success | - |\n\n### Step Slot\n| name | 说明  |\n|----|----|\n| icon | 自定义图标 |\n| title | 自定义标题 |\n| description | 自定义描述性文字 |\n","el-switch":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/switch](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/switch) \n     \n\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| value / v-model | 绑定值 | boolean / string / number | — | — |\n| disabled  | 是否禁用    | boolean   | — | false   |\n| width  | switch 的宽度（像素）    | number   | — | 40 |\n| active-icon-class  | switch 打开时所显示图标的类名，设置此项会忽略 `active-text`    | string   | — | — |\n| inactive-icon-class  | switch 关闭时所显示图标的类名，设置此项会忽略 `inactive-text`    | string   | — | — |\n| active-text  | switch 打开时的文字描述    | string   | — | — |\n| inactive-text  | switch 关闭时的文字描述    | string   | — | — |\n| on-text  | switch 打开时的文字    | string   | — | — |\n| off-text  | switch 关闭时的文字    | string   | — | — |\n| active-value  | switch 打开时的值    | boolean / string / number | — | true |\n| inactive-value  | switch 关闭时的值    | boolean / string / number | — | false |\n| name            | switch 对应的 name 属性    | string   | — | — |\n| validate-event  | 改变 switch 状态时是否触发表单的校验     | boolean   | - | true |\n\n### Events\n| 事件名称      | 说明    | 回调参数      |\n|---------- |-------- |---------- |\n| change  | switch 状态发生变化时的回调函数    | 新状态的值 |\n\n### Methods\n| 方法名 | 说明 | 参数 |\n| ---- | ---- | ---- |\n| focus | 使 Switch 获取焦点 | - |","el-table":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/table](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/table) \n     \n| 参数                      | 说明          | 类型      | 可选值                           | 默认值                                                  |\n|-------------------------|-------------- |---------- |--------------------------------  |------------------------------------------------------|\n| data                    | 显示的数据 | array | — | —                                                    |\n| height                  | Table 的高度，默认为自动高度。如果 height 为 number 类型，单位 px；如果 height 为 string 类型，则这个高度会设置为 Table 的 style.height 的值，Table 的高度会受控于外部样式。  | string/number | — | —                                                    |\n| max-height              | Table 的最大高度。合法的值为数字或者单位为 px 的高度。 | string/number | — | —                                                    |\n| size                    | Table 的尺寸 | string | medium / small | —                                                    |\n| fit                     | 列的宽度是否自撑开 | boolean | — | true                                                 |\n| show-header             | 是否显示表头 | boolean | — | true                                                 |\n| highlight-current-row   | 是否要高亮当前行 | boolean | — | false                                                |\n| current-row-key         | 当前行的 key，只写属性 | String,Number | — | —                                                    |\n| row-class-name          | 行的 className 的回调方法，也可以使用字符串为所有行设置一个固定的 className。 | Function({row, rowIndex})/String | — | —                                                    |\n| row-style               | 行的 style 的回调方法，也可以使用一个固定的 Object 为所有行设置一样的 Style。 | Function({row, rowIndex})/Object | — | —                                                    |\n| cell-class-name         | 单元格的 className 的回调方法，也可以使用字符串为所有单元格设置一个固定的 className。 | Function({row, column, rowIndex, columnIndex})/String | — | —                                                    |\n| cell-style              | 单元格的 style 的回调方法，也可以使用一个固定的 Object 为所有单元格设置一样的 Style。 | Function({row, column, rowIndex, columnIndex})/Object | — | —                                                    |\n| header-row-class-name   | 表头行的 className 的回调方法，也可以使用字符串为所有表头行设置一个固定的 className。 | Function({row, rowIndex})/String | — | —                                                    |\n| header-row-style        | 表头行的 style 的回调方法，也可以使用一个固定的 Object 为所有表头行设置一样的 Style。 | Function({row, rowIndex})/Object | — | —                                                    |\n| header-cell-class-name  | 表头单元格的 className 的回调方法，也可以使用字符串为所有表头单元格设置一个固定的 className。 | Function({row, column, rowIndex, columnIndex})/String | — | —                                                    |\n| header-cell-style       | 表头单元格的 style 的回调方法，也可以使用一个固定的 Object 为所有表头单元格设置一样的 Style。 | Function({row, column, rowIndex, columnIndex})/Object | — | —                                                    |\n| row-key                 | 行数据的 Key，用来优化 Table 的渲染；在使用 reserve-selection 功能与显示树形数据时，该属性是必填的。类型为 String 时，支持多层访问：`user.info.id`，但不支持 `user.info[0].id`，此种情况请使用 `Function`。 | Function(row)/String | — | —                                                    |\n| empty-text              | 空数据时显示的文本内容，也可以通过 `slot=\"empty\"` 设置 | String | — | 暂无数据                                                 |\n| default-expand-all      | 是否默认展开所有行，当 Table 包含展开行存在或者为树形表格时有效 | Boolean | — | false                                                |\n| expand-row-keys         | 可以通过该属性设置 Table 目前的展开行，需要设置 row-key 属性才能使用，该属性为展开行的 keys 数组。| Array | — |                                                      |\n| default-sort            | 默认的排序列的 prop 和顺序。它的`prop`属性指定默认的排序的列，`order`指定默认排序的顺序| Object | `order`: ascending, descending | 如果只指定了`prop`, 没有指定`order`, 则默认顺序是ascending           |\n| tooltip-effect          | tooltip `effect` 属性 | String | dark/light |                                                      | dark |\n| tooltip-options         | [popper.js](https://popper.js.org/documentation.html) 的参数 | Object            | 参考 [popper.js](https://popper.js.org/documentation.html) 文档 | { boundariesPadding: 0, gpuAcceleration: false }    |\n| show-summary            | 是否在表尾显示合计行 | Boolean | — | false                                                |\n| sum-text                | 合计行第一列的文本 | String | — | 合计                                                   |\n| summary-method          | 自定义的合计计算方法 | Function({ columns, data }) | — | —                                                    |\n| span-method             | 合并行或列的计算方法 | Function({ row, column, rowIndex, columnIndex }) | — | —                                                    |\n| select-on-indeterminate | 在多选表格中，当仅有部分行被选中时，点击表头的多选框时的行为。若为 true，则选中所有行；若为 false，则取消选择所有行 | Boolean | — | true                                                 |\n| indent                  | 展示树形数据时，树节点的缩进 | Number | — | 8                                                    |\n| lazy                    | 是否懒加载子节点数据 | Boolean | — | —                                                    |\n| load                    | 加载子节点数据的函数，lazy 为 true 时生效，函数第二个参数包含了节点的层级信息 | Function(row, treeNode, resolve) | — | —                                                    |\n| tree-props              | 渲染嵌套数据的配置选项 | Object | — | { hasChildren: 'hasChildren', children: 'children' } |\n\n### Table Events\n| 事件名 | 说明 | 参数 |\n| ---- | ---- | ---- |\n| select | 当用户手动勾选数据行的 Checkbox 时触发的事件 | selection, row |\n| select-all | 当用户手动勾选全选 Checkbox 时触发的事件 | selection |\n| selection-change | 当选择项发生变化时会触发该事件 | selection |\n| cell-mouse-enter | 当单元格 hover 进入时会触发该事件 | row, column, cell, event |\n| cell-mouse-leave | 当单元格 hover 退出时会触发该事件 | row, column, cell, event |\n| cell-click | 当某个单元格被点击时会触发该事件 | row, column, cell, event |\n| cell-dblclick | 当某个单元格被双击击时会触发该事件 | row, column, cell, event |\n| row-click | 当某一行被点击时会触发该事件 | row, column, event |\n| row-contextmenu | 当某一行被鼠标右键点击时会触发该事件 | row, column, event |\n| row-dblclick | 当某一行被双击时会触发该事件 | row, column, event |\n| header-click | 当某一列的表头被点击时会触发该事件 | column, event |\n| header-contextmenu | 当某一列的表头被鼠标右键点击时触发该事件 | column, event |\n| sort-change | 当表格的排序条件发生变化的时候会触发该事件 | { column, prop, order } |\n| filter-change | 当表格的筛选条件发生变化的时候会触发该事件，参数的值是一个对象，对象的 key 是 column 的 columnKey，对应的 value 为用户选择的筛选条件的数组。 | filters |\n| current-change | 当表格的当前行发生变化的时候会触发该事件，如果要高亮当前行，请打开表格的 highlight-current-row 属性 | currentRow, oldCurrentRow |\n| header-dragend | 当拖动表头改变了列的宽度的时候会触发该事件 | newWidth, oldWidth, column, event |\n| expand-change  | 当用户对某一行展开或者关闭的时候会触发该事件（展开行时，回调的第二个参数为 expandedRows；树形表格时第二参数为 expanded） | row, (expandedRows \\| expanded) |\n\n### Table Methods\n| 方法名 | 说明 | 参数 |\n| ---- | ---- | ---- |\n| clearSelection | 用于多选表格，清空用户的选择 | — |\n| toggleRowSelection | 用于多选表格，切换某一行的选中状态，如果使用了第二个参数，则是设置这一行选中与否（selected 为 true 则选中） | row, selected |\n| toggleAllSelection | 用于多选表格，切换所有行的选中状态 | - |\n| toggleRowExpansion | 用于可展开表格与树形表格，切换某一行的展开状态，如果使用了第二个参数，则是设置这一行展开与否（expanded 为 true 则展开） | row, expanded |\n| setCurrentRow | 用于单选表格，设定某一行为选中行，如果调用时不加参数，则会取消目前高亮行的选中状态。 | row |\n| clearSort | 用于清空排序条件，数据会恢复成未排序的状态 | — |\n| clearFilter | 不传入参数时用于清空所有过滤条件，数据会恢复成未过滤的状态，也可传入由columnKey组成的数组以清除指定列的过滤条件 | columnKey |\n| doLayout | 对 Table 进行重新布局。当 Table 或其祖先元素由隐藏切换为显示时，可能需要调用此方法 | — |\n| sort | 手动对 Table 进行排序。参数`prop`属性指定排序列，`order`指定排序顺序。 | prop: string, order: string |\n\n### Table Slot\n| name | 说明 |\n|------|--------|\n| append | 插入至表格最后一行之后的内容，如果需要对表格的内容进行无限滚动操作，可能需要用到这个 slot。若表格有合计行，该 slot 会位于合计行之上。 |\n\n### Table-column Attributes\n| 参数      | 说明                                                                                                                 | 类型      | 可选值                           | 默认值  |\n|---------- |--------------------------------------------------------------------------------------------------------------------|---------- |--------------------------------  |-------- |\n| type | 对应列的类型。如果设置了 `selection` 则显示多选框；如果设置了 `index` 则显示该行的索引（从 1 开始计算）；如果设置了 `expand` 则显示为一个可展开的按钮                       | string | selection/index/expand | — |\n| index | 如果设置了 `type=index`，可以通过传递 `index` 属性来自定义索引                                                                         | number, Function(index) | - | - |\n| column-key | column 的 key，如果需要使用 filter-change 事件，则需要此属性标识是哪个 column 的筛选条件                                                      | string | — | — |\n| label | 显示的标题                                                                                                              | string | — | — |\n| prop | 对应列内容的字段名，也可以使用 property 属性                                                                                        | string | — | — |\n| width | 对应列的宽度                                                                                                             | string | — | — |\n| min-width | 对应列的最小宽度，与 width 的区别是 width 是固定的，min-width 会把剩余宽度按比例分配给设置了 min-width 的列                                            | string | — | — |\n| fixed | 列是否固定在左侧或者右侧，true 表示固定在左侧                                                                                          | string, boolean | true, left, right | — |\n| render-header | 列标题 Label 区域渲染使用的 Function                                                                                         | Function(h, { column, $index }) | — | — |\n| sortable | 对应列是否可以排序，如果设置为 'custom'，则代表用户希望远程排序，需要监听 Table 的 sort-change 事件                                                   | boolean, string | true, false, 'custom' | false |\n| sort-method | 对数据进行排序的时候使用的方法，仅当 sortable 设置为 true 的时候有效，需返回一个数字，和 Array.sort 表现一致                                               | Function(a, b) | — | — |\n| sort-by | 指定数据按照哪个属性进行排序，仅当 sortable 设置为 true 且没有设置 sort-method 的时候有效。如果 sort-by 为数组，则先按照第 1 个属性排序，如果第 1 个相等，再按照第 2 个排序，以此类推 | String/Array/Function(row, index) | — | — |\n| sort-orders | 数据在排序时所使用排序策略的轮转顺序，仅当 sortable 为 true 时有效。需传入一个数组，随着用户点击表头，该列依次按照数组中元素的顺序进行排序                                      | array | 数组中的元素需为以下三者之一：`ascending` 表示升序，`descending` 表示降序，`null` 表示还原为原始顺序 | ['ascending', 'descending', null] |\n| resizable | 对应列是否可以通过拖动改变宽度（需要在 el-table 上设置 border 属性为真）                                                                      | boolean | — | true |\n| formatter | 用来格式化内容                                                                                                            | Function(row, column, cellValue, index) | — | — |\n| show-overflow-tooltip | 当内容过长被隐藏时显示 tooltip                                                                                                | Boolean | — | false |\n| align | 对齐方式                                                                                                               | String | left/center/right | left |\n| header-align | 表头对齐方式，若不设置该项，则使用表格的对齐方式                                                                                           | String | left/center/right | — |\n| class-name | 列的 className                                                                                                       | string | — | — |\n| label-class-name | 当前列标题的自定义类名                                                                                                        | string | — | — |\n| selectable | 仅对 type=selection 的列有效，类型为 Function，Function 的返回值用来决定这一行的 CheckBox 是否可以勾选，返回`true`则可选，返回字符串则显示这个字符串为tooltip提示                                         | Function(row, index) | — | — |\n| reserve-selection | 仅对 type=selection 的列有效，类型为 Boolean，为 true 则会在数据更新之后保留之前选中的数据（需指定 `row-key`）                                        | Boolean | — | false |\n| filters | 数据过滤的选项，数组格式，数组中的元素需要有 text 和 value 属性。                                                                            | Array[{ text, value }] | — | — |\n| filter-placement | 过滤弹出框的定位                                                                                                           | String | 与 Tooltip 的 `placement` 属性相同 | — |\n| filter-multiple | 数据过滤的选项是否多选                                                                                                        | Boolean | — | true |\n| filter-method | 数据过滤使用的方法，如果是多选的筛选项，对每一条数据会执行多次，任意一次返回 true 就会显示。                                                                  | Function(value, row, column) | — | — |\n| filtered-value | 选中的数据过滤项，如果需要自定义表头过滤的渲染方式，可能会需要此属性。                                                                                | Array | — | — |\n\n### Table-column Scoped Slot\n| name | 说明 |\n|------|--------|\n| — | 自定义列的内容，参数为 { row, column, $index } |\n| header | 自定义表头的内容. 参数为 { column, $index } |\n","el-table-column":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/table#table-column-attributes](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/table#table-column-attributes) \n     \n| 参数      | 说明                                                                                                                 | 类型      | 可选值                           | 默认值  |\n|---------- |--------------------------------------------------------------------------------------------------------------------|---------- |--------------------------------  |-------- |\n| type | 对应列的类型。如果设置了 `selection` 则显示多选框；如果设置了 `index` 则显示该行的索引（从 1 开始计算）；如果设置了 `expand` 则显示为一个可展开的按钮                       | string | selection/index/expand | — |\n| index | 如果设置了 `type=index`，可以通过传递 `index` 属性来自定义索引                                                                         | number, Function(index) | - | - |\n| column-key | column 的 key，如果需要使用 filter-change 事件，则需要此属性标识是哪个 column 的筛选条件                                                      | string | — | — |\n| label | 显示的标题                                                                                                              | string | — | — |\n| prop | 对应列内容的字段名，也可以使用 property 属性                                                                                        | string | — | — |\n| width | 对应列的宽度                                                                                                             | string | — | — |\n| min-width | 对应列的最小宽度，与 width 的区别是 width 是固定的，min-width 会把剩余宽度按比例分配给设置了 min-width 的列                                            | string | — | — |\n| fixed | 列是否固定在左侧或者右侧，true 表示固定在左侧                                                                                          | string, boolean | true, left, right | — |\n| render-header | 列标题 Label 区域渲染使用的 Function                                                                                         | Function(h, { column, $index }) | — | — |\n| sortable | 对应列是否可以排序，如果设置为 'custom'，则代表用户希望远程排序，需要监听 Table 的 sort-change 事件                                                   | boolean, string | true, false, 'custom' | false |\n| sort-method | 对数据进行排序的时候使用的方法，仅当 sortable 设置为 true 的时候有效，需返回一个数字，和 Array.sort 表现一致                                               | Function(a, b) | — | — |\n| sort-by | 指定数据按照哪个属性进行排序，仅当 sortable 设置为 true 且没有设置 sort-method 的时候有效。如果 sort-by 为数组，则先按照第 1 个属性排序，如果第 1 个相等，再按照第 2 个排序，以此类推 | String/Array/Function(row, index) | — | — |\n| sort-orders | 数据在排序时所使用排序策略的轮转顺序，仅当 sortable 为 true 时有效。需传入一个数组，随着用户点击表头，该列依次按照数组中元素的顺序进行排序                                      | array | 数组中的元素需为以下三者之一：`ascending` 表示升序，`descending` 表示降序，`null` 表示还原为原始顺序 | ['ascending', 'descending', null] |\n| resizable | 对应列是否可以通过拖动改变宽度（需要在 el-table 上设置 border 属性为真）                                                                      | boolean | — | true |\n| formatter | 用来格式化内容                                                                                                            | Function(row, column, cellValue, index) | — | — |\n| show-overflow-tooltip | 当内容过长被隐藏时显示 tooltip                                                                                                | Boolean | — | false |\n| align | 对齐方式                                                                                                               | String | left/center/right | left |\n| header-align | 表头对齐方式，若不设置该项，则使用表格的对齐方式                                                                                           | String | left/center/right | — |\n| class-name | 列的 className                                                                                                       | string | — | — |\n| label-class-name | 当前列标题的自定义类名                                                                                                        | string | — | — |\n| selectable | 仅对 type=selection 的列有效，类型为 Function，Function 的返回值用来决定这一行的 CheckBox 是否可以勾选，返回`true`则可选，返回字符串则显示这个字符串为tooltip提示                                         | Function(row, index) | — | — |\n| reserve-selection | 仅对 type=selection 的列有效，类型为 Boolean，为 true 则会在数据更新之后保留之前选中的数据（需指定 `row-key`）                                        | Boolean | — | false |\n| filters | 数据过滤的选项，数组格式，数组中的元素需要有 text 和 value 属性。                                                                            | Array[{ text, value }] | — | — |\n| filter-placement | 过滤弹出框的定位                                                                                                           | String | 与 Tooltip 的 `placement` 属性相同 | — |\n| filter-multiple | 数据过滤的选项是否多选                                                                                                        | Boolean | — | true |\n| filter-method | 数据过滤使用的方法，如果是多选的筛选项，对每一条数据会执行多次，任意一次返回 true 就会显示。                                                                  | Function(value, row, column) | — | — |\n| filtered-value | 选中的数据过滤项，如果需要自定义表头过滤的渲染方式，可能会需要此属性。                                                                                | Array | — | — |\n\n### Table-column Scoped Slot\n| name | 说明 |\n|------|--------|\n| — | 自定义列的内容，参数为 { row, column, $index } |\n| header | 自定义表头的内容. 参数为 { column, $index } |\n","el-tabs":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/tabs](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/tabs) \n     \n| 参数       | 说明     | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| value / v-model  | 绑定值，选中选项卡的 name  | string   |  —  |  第一个选项卡的 name |\n| type     | 风格类型   | string   | card  |     —    |\n| closable  | 标签是否可关闭   | boolean   | — |  false  |\n| addable  | 标签是否可增加   | boolean   | — |  false  |\n| editable  | 标签是否同时可增加和关闭   | boolean   | — |  false  |\n| tab-position  | 选项卡所在位置 | string   |  top/right/bottom/left  |  top |\n| stretch  | 标签的宽度是否自撑开 | boolean   |  -  |  false |\n| before-leave | 切换标签之前的钩子，若返回 false 或者返回 Promise 且被 reject，则阻止切换。 | Function(activeName, oldActiveName) | — | — |\n\n### Tabs Events\n| 事件名称 | 说明 | 回调参数 |\n|---------- |-------- |---------- |\n| tab-click  | tab 被选中时触发 | 被选中的标签 tab 实例 |\n| tab-remove  | 点击 tab 移除按钮后触发  | 被删除的标签的 name |\n| tab-add  | 点击 tabs 的新增按钮后触发  | — |\n| edit  | 点击 tabs 的新增按钮或 tab 被关闭后触发  | (targetName, action) |\n\n### Tab-pane Attributes\n| 参数       | 说明     | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| label     | 选项卡标题   | string   | — |    —     |\n| disabled | 是否禁用 | boolean | — | false |\n| name      | 与选项卡绑定值 value 对应的标识符，表示选项卡别名 | string | — | 该选项卡在选项卡列表中的顺序值，如第一个选项卡则为'1' |\n| closable  | 标签是否可关闭   | boolean   | — |  false  |\n| lazy  | 标签是否延迟渲染   | boolean   | — |  false  |\n","el-tag":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/tag](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/tag) \n     \n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| type | 类型 | string | success/primary/warning/danger | — |\n| closable | 是否可关闭 | boolean | — | false |\n| disable-transitions | 是否禁用渐变动画 | boolean | — | false |\n| color | 背景色 | string | — | — |\n| size | 尺寸 | string |   small  | — |\n\n\n### Events\n| 事件名称 | 说明 | 回调参数 |\n|---------- |-------- |---------- |\n| click | 点击 Tag 时触发的事件 | — |\n| close | 关闭 Tag 时触发的事件 | — |\n","el-time-picker":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/time-picker](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/time-picker) \n     \n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| value / v-model | 绑定值 | date(TimePicker) / string(TimeSelect) | — | — |\n| readonly | 完全只读 | boolean | — | false |\n| disabled | 禁用 | boolean | — | false |\n| editable | 文本框可输入 | boolean | — | true |\n| clearable | 是否显示清除按钮 | boolean | — | true |\n| placeholder | 非范围选择时的占位内容 | string | — | — |\n| start-placeholder | 范围选择时开始日期的占位内容 | string | — | — |\n| end-placeholder | 范围选择时开始日期的占位内容 | string | — | — |\n| is-range | 是否为时间范围选择，仅对`<el-time-picker>`有效 | boolean | — | false |\n| arrow-control | 是否使用箭头进行时间选择，仅对`<el-time-picker>`有效 | boolean | — | false |\n| align | 对齐方式 | string | left / center / right | left |\n| popper-class | TimePicker 下拉框的类名 | string | — | — |\n| picker-options | 当前时间日期选择器特有的选项参考下表 | object | — | {} |\n| range-separator | 选择范围时的分隔符 | string | - | '-' |\n| value-format | 可选，仅TimePicker时可用，绑定值的格式。不指定则绑定值为 Date 对象 | string | 见[日期格式](#/zh-CN/component/date-picker#ri-qi-ge-shi) | — |\n| default-value | 可选，选择器打开时默认显示的时间 | Date(TimePicker) / string(TimeSelect) | 可被`new Date()`解析(TimePicker) / 可选值(TimeSelect) | — |\n| name | 原生属性 | string | — | — |\n| prefix-icon | 自定义头部图标的类名 | string | — | el-icon-time |\n| clear-icon | 自定义清空图标的类名 | string | — | el-icon-circle-close |\n\n### Time Select Options\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| start | 开始时间 | string | — | 09:00 |\n| end | 结束时间 | string | — | 18:00 |\n| step | 间隔时间 | string | — | 00:30 |\n| minTime | 最小时间，小于该时间的时间段将被禁用 | string | — | 00:00 |\n| maxTime | 最大时间，大于该时间的时间段将被禁用 | string | — | — |\n\n### Time Picker Options\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| selectableRange | 可选时间段，例如`'18:30:00 - 20:30:00'`或者传入数组`['09:30:00 - 12:00:00', '14:30:00 - 18:30:00']` | string / array | — | — |\n| format | 时间格式化(TimePicker) | string | 小时：`HH`，分：`mm`，秒：`ss`，AM/PM `A` | 'HH:mm:ss' |\n\n### Events\n| 事件名 | 说明 | 参数 |\n|---------|--------|---------|\n| change | 用户确认选定的值时触发 | 组件绑定值 |\n| blur | 当 input 失去焦点时触发 | 组件实例 |\n| focus | 当 input 获得焦点时触发 | 组件实例 |\n\n### Methods\n| 方法名 | 说明 | 参数 |\n| ---- | ---- | ---- |\n| focus | 使 input 获取焦点 | - |\n","el-timeline":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/timeline](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/timeline) \n     \n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| reverse | 指定节点排序方向，默认为正序 | boolean | — | false |\n\n### Timeline-item Attributes\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| timestamp     | 时间戳 | string  | - | — |\n| hide-timestamp  | 是否隐藏时间戳 | boolean | — | false |\n| placement | 时间戳位置 | string | top / bottom | bottom |\n| type | 节点类型 | string | primary / success / warning / danger / info | - |\n| color | 节点颜色 | string | hsl / hsv / hex / rgb | - |\n| size | 节点尺寸 | string | normal / large | normal |\n| icon | 节点图标 | string | — | - |\n\n### Timeline-Item Slot\n| name | 说明 |\n|------|--------|\n| — | Timeline-Item 的内容 |\n| dot | 自定义节点 |\n","el-timeline-item":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/timeline#timeline-item-attributes](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/timeline#timeline-item-attributes) \n     \n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| timestamp     | 时间戳 | string  | - | — |\n| hide-timestamp  | 是否隐藏时间戳 | boolean | — | false |\n| placement | 时间戳位置 | string | top / bottom | bottom |\n| type | 节点类型 | string | primary / success / warning / danger / info | - |\n| color | 节点颜色 | string | hsl / hsv / hex / rgb | - |\n| size | 节点尺寸 | string | normal / large | normal |\n| icon | 节点图标 | string | — | - |\n\n### Timeline-Item Slot\n| name | 说明 |\n|------|--------|\n| — | Timeline-Item 的内容 |\n| dot | 自定义节点 |\n","el-tooltip":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/tooltip](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/tooltip) \n     \n| 参数               | 说明                                                     | 类型              | 可选值      | 默认值 |\n|--------------------|----------------------------------------------------------|-------------------|-------------|--------|\n|  effect        |  默认提供的主题  | String            | dark/light | dark  |\n|  content        |  显示的内容，也可以通过 `slot#content` 传入 DOM  | String            | — | — |\n|  placement        |  Tooltip 的出现位置  | String           |  top/top-start/top-end/bottom/bottom-start/bottom-end/left/left-start/left-end/right/right-start/right-end |  bottom |\n|  value / v-model |  状态是否可见  | Boolean           | — |  false |\n|  disabled       |  Tooltip 是否可用  | Boolean           | — |  false |\n|  offset        |  出现位置的偏移量  | Number           | — |  0 |\n|  transition     |  定义渐变动画      | String             | — | el-fade-in-linear |\n|  visible-arrow   |  是否显示 Tooltip 箭头，更多参数可见[Vue-popper](https://github.com/element-component/vue-popper) | Boolean | — | true |\n|  popper-options        | [popper.js](https://popper.js.org/documentation.html) 的参数 | Object            | 参考 [popper.js](https://popper.js.org/documentation.html) 文档 | { boundariesElement: 'body', gpuAcceleration: false } |\n| open-delay | 延迟出现，单位毫秒 | Number | — | 0 |\n| manual | 手动控制模式，设置为 true 后，mouseenter 和 mouseleave 事件将不会生效 | Boolean | — | false |\n| popper-class | 为 Tooltip 的 popper 添加类名 | String | — | — |\n| enterable | 鼠标是否可进入到 tooltip 中 | Boolean | — | true |\n| hide-after | Tooltip 出现后自动隐藏延时，单位毫秒，为 0 则不会自动隐藏 | number | — | 0 |\n| tabindex   | Tooltip 组件的 [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) | number | — | 0 |\n","el-transfer":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/transfer](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/transfer) \n     \n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\n|---------- |-------- |---------- |-------------  |-------- |\n| value / v-model | 绑定值 | array | — | — |\n| data | Transfer 的数据源 | array[{ key, label, disabled }] | — | [ ] |\n| filterable | 是否可搜索 | boolean | — | false |\n| filter-placeholder | 搜索框占位符 | string | — | 请输入搜索内容 |\n| filter-method | 自定义搜索方法 | function | — | — |\n| target-order | 右侧列表元素的排序策略：若为 `original`，则保持与数据源相同的顺序；若为 `push`，则新加入的元素排在最后；若为 `unshift`，则新加入的元素排在最前 | string | original / push / unshift | original |\n| titles | 自定义列表标题 | array | — | ['列表 1', '列表 2'] |\n| button-texts | 自定义按钮文案 | array | — | [ ] |\n| render-content | 自定义数据项渲染函数 | function(h, option) | — | — |\n| format | 列表顶部勾选状态文案 | object{noChecked, hasChecked} | — | { noChecked: '${checked}/${total}', hasChecked: '${checked}/${total}' } |\n| props | 数据源的字段别名 | object{key, label, disabled} | — | — |\n| left-default-checked | 初始状态下左侧列表的已勾选项的 key 数组 | array | — | [ ] |\n| right-default-checked | 初始状态下右侧列表的已勾选项的 key 数组 | array | — | [ ] |\n\n### Slot\n| name | 说明 |\n|------|--------|\n| left-footer | 左侧列表底部的内容 |\n| right-footer | 右侧列表底部的内容 |\n\n### Scoped Slot\n| name | 说明 |\n|------|--------|\n| — | 自定义数据项的内容，参数为 { option } |\n\n### Methods\n| 方法名 | 说明 | 参数 |\n| ---- | ---- | ---- |\n| clearQuery | 清空某个面板的搜索关键词 | 'left' / 'right'，指定需要清空的面板 |\n\n### Events\n| 事件名称      | 说明    | 回调参数      |\n|---------- |-------- |---------- |\n| change | 右侧列表元素变化时触发 | 当前值、数据移动的方向（'left' / 'right'）、发生移动的数据 key 数组 |\n| left-check-change | 左侧列表元素被用户选中 / 取消选中时触发 | 当前被选中的元素的 key 数组、选中状态发生变化的元素的 key 数组 |\n| right-check-change | 右侧列表元素被用户选中 / 取消选中时触发 | 当前被选中的元素的 key 数组、选中状态发生变化的元素的 key 数组 |\n","el-transition":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/transition](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/transition) \n     \n\nElement 内应用在部分组件的过渡动画，你也可以直接使用。在使用之前请阅读 [transition 组件文档](https://cn.vuejs.org/v2/api/#transition) 。\n\n### fade 淡入淡出\n\n:::demo 提供 `el-fade-in-linear` 和 `el-fade-in` 两种效果。\n```html\n<template>\n  <div>\n    <el-button @click=\"show = !show\">Click Me</el-button>\n\n    <div style=\"display: flex; margin-top: 20px; height: 100px;\">\n      <transition name=\"el-fade-in-linear\">\n        <div v-show=\"show\" class=\"transition-box\">.el-fade-in-linear</div>\n      </transition>\n      <transition name=\"el-fade-in\">\n        <div v-show=\"show\" class=\"transition-box\">.el-fade-in</div>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script>\n    export default {\n    data: () => ({\n      show: true\n    })\n  }\n</script>\n\n<style>\n  .transition-box {\n    margin-bottom: 10px;\n    width: 200px;\n    height: 100px;\n    border-radius: 4px;\n    background-color: #409EFF;\n    text-align: center;\n    color: #fff;\n    padding: 40px 20px;\n    box-sizing: border-box;\n    margin-right: 20px;\n  }\n</style>\n```\n:::\n\n### zoom 缩放\n\n:::demo 提供 `el-zoom-in-center`，`el-zoom-in-top` 和 `el-zoom-in-bottom` 三种效果。\n```html\n<template>\n  <div>\n    <el-button @click=\"show2 = !show2\">Click Me</el-button>\n\n    <div style=\"display: flex; margin-top: 20px; height: 100px;\">\n      <transition name=\"el-zoom-in-center\">\n        <div v-show=\"show2\" class=\"transition-box\">.el-zoom-in-center</div>\n      </transition>\n\n      <transition name=\"el-zoom-in-top\">\n        <div v-show=\"show2\" class=\"transition-box\">.el-zoom-in-top</div>\n      </transition>\n\n      <transition name=\"el-zoom-in-bottom\">\n        <div v-show=\"show2\" class=\"transition-box\">.el-zoom-in-bottom</div>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script>\n    export default {\n    data: () => ({\n      show2: true\n    })\n  }\n</script>\n\n<style>\n  .transition-box {\n    margin-bottom: 10px;\n    width: 200px;\n    height: 100px;\n    border-radius: 4px;\n    background-color: #409EFF;\n    text-align: center;\n    color: #fff;\n    padding: 40px 20px;\n    box-sizing: border-box;\n    margin-right: 20px;\n  }\n</style>\n```\n:::\n\n\n### collapse 展开折叠\n\n使用 `el-collapse-transition` 组件实现折叠展开效果。\n\n:::demo\n```html\n<template>\n  <div>\n    <el-button @click=\"show3 = !show3\">Click Me</el-button>\n\n    <div style=\"margin-top: 20px; height: 200px;\">\n      <el-collapse-transition>\n        <div v-show=\"show3\">\n          <div class=\"transition-box\">el-collapse-transition</div>\n          <div class=\"transition-box\">el-collapse-transition</div>\n        </div>\n      </el-collapse-transition>\n    </div>\n  </div>\n</template>\n\n<script>\n    export default {\n    data: () => ({\n      show3: true\n    })\n  }\n</script>\n\n<style>\n  .transition-box {\n    margin-bottom: 10px;\n    width: 200px;\n    height: 100px;\n    border-radius: 4px;\n    background-color: #409EFF;\n    text-align: center;\n    color: #fff;\n    padding: 40px 20px;\n    box-sizing: border-box;\n    margin-right: 20px;\n  }\n</style>\n```\n:::\n\n### 按需引入\n\n```js\n// fade/zoom 等\nimport '@jdcloud/jelement-ui-default/lib/base.css';\n// collapse 展开折叠\nimport CollapseTransition from '@jdcloud/jelement-ui-default/lib/transitions/collapse-transition';\nimport Vue from 'vue'\n\nVue.component(CollapseTransition.name, CollapseTransition)\n```\n","el-tree":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/tree](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/tree) \n     \n| 参数                  | 说明                                               | 类型                        | 可选值  | 默认值   |\n| --------------------- | ---------------------------------------- | --------------------------- | ---- | ----- |\n| data                  | 展示数据                                           | array                       | —    | —     |\n| empty-text            | 内容为空的时候展示的文本                           | String                      | —    | —     |\n| node-key              | 每个树节点用来作为唯一标识的属性，整棵树应该是唯一的               | String                      | —    | —     |\n| props                 | 配置选项，具体看下表                               | object                      | —    | —     |\n| render-after-expand   | 是否在第一次展开某个树节点后才渲染其子节点         | boolean                      | —    | true |\n| load                  | 加载子树数据的方法，仅当 lazy 属性为true 时生效    | function(node, resolve)     | —    | —     |\n| render-content        | 树节点的内容区的渲染 Function                      | Function(h, { node, data, store }        | —    | —     |\n| highlight-current     | 是否高亮当前选中节点，默认值是 false。             | boolean                     | —    | false |\n| default-expand-all    | 是否默认展开所有节点                               | boolean                     | —    | false |\n| expand-on-click-node  | 是否在点击节点的时候展开或者收缩节点， 默认值为 true，如果为 false，则只有点箭头图标的时候才会展开或者收缩节点。 | boolean                     | —    | true  |\n| check-on-click-node   | 是否在点击节点的时候选中节点，默认值为 false，即只有在点击复选框时才会选中节点。 | boolean                     | —    | false |\n| auto-expand-parent    | 展开子节点的时候是否自动展开父节点                 | boolean                     | —    | true  |\n| default-expanded-keys | 默认展开的节点的 key 的数组                        | array                       | —    | —     |\n| show-checkbox         | 节点是否可被选择                                   | boolean                     | —    | false |\n| check-strictly        | 在显示复选框的情况下，是否严格的遵循父子不互相关联的做法，默认为 false   | boolean                     | —    | false |\n| default-checked-keys  | 默认勾选的节点的 key 的数组                        | array                       | —    | —     |\n| current-node-key      | 当前选中的节点                                   | string, number               | —    | —     |\n| filter-node-method    | 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏 | Function(value, data, node) | —    | —     |\n| accordion             | 是否每次只打开一个同级树节点展开                   | boolean                     | —    | false |\n| indent                | 相邻级节点间的水平缩进，单位为像素                 | number                     | —    | 16 |\n| icon-class            | 自定义树节点的图标                              |  string                     | -    | -     |\n| lazy                  | 是否懒加载子节点，需与 load 方法结合使用           | boolean                     | —    | false |\n| draggable             | 是否开启拖拽节点功能                                   | boolean            | —    | false |\n| allow-drag            | 判断节点能否被拖拽                  | Function(node)  | —  | —  |\n| allow-drop            | 拖拽时判定目标节点能否被放置。`type` 参数有三种情况：'prev'、'inner' 和 'next'，分别表示放置在目标节点前、插入至目标节点和放置在目标节点后 | Function(draggingNode, dropNode, type)  | —    | —     |\n\n### props\n| 参数       | 说明                | 类型     | 可选值  | 默认值  |\n| -------- | ----------------- | ------ | ---- | ---- |\n| label    | 指定节点标签为节点对象的某个属性值 | string, function(data, node) | —    | —    |\n| children | 指定子树为节点对象的某个属性值 | string | —    | —    |\n| disabled | 指定节点选择框是否禁用为节点对象的某个属性值 | boolean, function(data, node) | —    | —    |\n| isLeaf | 指定节点是否为叶子节点，仅在指定了 lazy 属性的情况下生效 | boolean, function(data, node) | —    | —    |\n\n### 方法\n`Tree` 内部使用了 Node 类型的对象来包装用户传入的数据，用来保存目前节点的状态。\n`Tree` 拥有如下方法：\n\n| 方法名             | 说明                                       | 参数                                       |\n| --------------- | ---------------------------------------- | ---------------------------------------- |\n| filter          | 对树节点进行筛选操作                               | 接收一个任意类型的参数，该参数会在 filter-node-method 中作为第一个参数 |\n| updateKeyChildren | 通过 keys 设置节点子元素，使用此方法必须设置 node-key 属性 | (key, data) 接收两个参数，1. 节点 key 2. 节点数据的数组 |\n| getCheckedNodes | 若节点可被选择（即 `show-checkbox` 为 `true`），则返回目前被选中的节点所组成的数组 | (leafOnly, includeHalfChecked) 接收两个 boolean 类型的参数，1. 是否只是叶子节点，默认值为 `false` 2. 是否包含半选节点，默认值为 `false` |\n| setCheckedNodes | 设置目前勾选的节点，使用此方法必须设置 node-key 属性          | (nodes) 接收勾选节点数据的数组                      |\n| getCheckedKeys  | 若节点可被选择（即 `show-checkbox` 为 `true`），则返回目前被选中的节点的 key 所组成的数组 | (leafOnly) 接收一个 boolean 类型的参数，若为 `true` 则仅返回被选中的叶子节点的 keys，默认值为 `false` |\n| setCheckedKeys  | 通过 keys 设置目前勾选的节点，使用此方法必须设置 node-key 属性  | (keys, leafOnly) 接收两个参数，1. 勾选节点的 key 的数组 2. boolean 类型的参数，若为 `true` 则仅设置叶子节点的选中状态，默认值为 `false` |\n| setChecked      | 通过 key / data 设置某个节点的勾选状态，使用此方法必须设置 node-key 属性 | (key/data, checked, deep) 接收三个参数，1. 勾选节点的 key 或者 data 2. boolean 类型，节点是否选中  3. boolean 类型，是否设置子节点 ，默认为 false |\n| getHalfCheckedNodes | 若节点可被选择（即 `show-checkbox` 为 `true`），则返回目前半选中的节点所组成的数组  | - |\n| getHalfCheckedKeys | 若节点可被选择（即 `show-checkbox` 为 `true`），则返回目前半选中的节点的 key 所组成的数组 | - |\n| getCurrentKey   | 获取当前被选中节点的 key，使用此方法必须设置 node-key 属性，若没有节点被选中则返回 null | — |\n| getCurrentNode  | 获取当前被选中节点的 data，若没有节点被选中则返回 null | — |\n| setCurrentKey   | 通过 key 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性 | (key) 待被选节点的 key，若为 null 则取消当前高亮的节点 |\n| setCurrentNode  | 通过 node 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性 | (node) 待被选节点的 node |\n| getNode         | 根据 data 或者 key 拿到 Tree 组件中的 node | (data) 要获得 node 的 key 或者 data |\n| remove          | 删除 Tree 中的一个节点，使用此方法必须设置 node-key 属性  | (data) 要删除的节点的 data 或者 node |\n| append          | 为 Tree 中的一个节点追加一个子节点 | (data, parentNode) 接收两个参数，1. 要追加的子节点的 data 2. 子节点的 parent 的 data、key 或者 node |\n| insertBefore    | 为 Tree 的一个节点的前面增加一个节点  | (data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的后一个节点的 data、key 或者 node |\n| insertAfter     | 为 Tree 的一个节点的后面增加一个节点  | (data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的前一个节点的 data、key 或者 node |\n\n### Events\n| 事件名称           | 说明             | 回调参数                                     |\n| -------------- | -------------- | ---------------------------------------- |\n| node-click     | 节点被点击时的回调      | 共三个参数，依次为：传递给 `data` 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。 |\n| node-contextmenu | 当某一节点被鼠标右键点击时会触发该事件 | 共四个参数，依次为：event、传递给 `data` 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。 |\n| check-change   | 节点选中状态发生变化时的回调 | 共三个参数，依次为：传递给 `data` 属性的数组中该节点所对应的对象、节点本身是否被选中、节点的子树中是否有被选中的节点 |\n| check          | 当复选框被点击的时候触发 | 共两个参数，依次为：传递给 `data` 属性的数组中该节点所对应的对象、树目前的选中状态对象，包含 checkedNodes、checkedKeys、halfCheckedNodes、halfCheckedKeys 四个属性 |\n| current-change | 当前选中节点变化时触发的事件 | 共两个参数，依次为：当前节点的数据，当前节点的 Node 对象          |\n| node-expand    | 节点被展开时触发的事件    | 共三个参数，依次为：传递给 `data` 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身 |\n| node-collapse  | 节点被关闭时触发的事件    | 共三个参数，依次为：传递给 `data` 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身 |\n| node-drag-start | 节点开始拖拽时触发的事件  | 共两个参数，依次为：被拖拽节点对应的 Node、event |\n| node-drag-enter | 拖拽进入其他节点时触发的事件  | 共三个参数，依次为：被拖拽节点对应的 Node、所进入节点对应的 Node、event |\n| node-drag-leave | 拖拽离开某个节点时触发的事件  | 共三个参数，依次为：被拖拽节点对应的 Node、所离开节点对应的 Node、event |\n| node-drag-over | 在拖拽节点时触发的事件（类似浏览器的 mouseover 事件） | 共三个参数，依次为：被拖拽节点对应的 Node、当前进入节点对应的 Node、event |\n| node-drag-end  | 拖拽结束时（可能未成功）触发的事件  | 共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点（可能为空）、被拖拽节点的放置位置（before、after、inner）、event |\n| node-drop  | 拖拽成功完成时触发的事件  | 共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点、被拖拽节点的放置位置（before、after、inner）、event |\n\n### Scoped Slot\n| name | 说明 |\n|------|--------|\n| — | 自定义树节点的内容，参数为 { node, data } |\n","el-typography":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/typography](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/typography) \n       import bus from '../../bus';\n  import { ACTION_USER_CONFIG_UPDATE } from '../../components/theme/constant.js';\n  const varMap = [\n    '$--font-size-extra-large',\n    '$--font-size-large',\n    '$--font-size-medium',\n    '$--font-size-base',\n    '$--font-size-small',\n    '$--font-size-extra-small'\n  ];\n  const original = {\n    'font_size_extra_large': '20px',\n    'font_size_large': '18px',\n    'font_size_medium': '16px',\n    'font_size_base': '14px',\n    'font_size_small': '13px',\n    'font_size_extra_small': '12px'\n  }\n  export default {\n    created() {\n      bus.$on(ACTION_USER_CONFIG_UPDATE, this.setGlobal);\n    },\n    mounted() {\n      this.setGlobal();\n    },\n    methods: {\n      tintColor(color, tint) {\n        return tintColor(color, tint);\n      },\n      setGlobal() {\n        if (window.userThemeConfig) {\n          this.global = window.userThemeConfig.global;\n        }\n      }\n    },\n    data() {\n      return {\n        global: {},\n        'font_size_extra_large': '',\n        'font_size_large': '',\n        'font_size_medium': '',\n        'font_size_base': '',\n        'font_size_small': '',\n        'font_size_extra_small': ''\n      }\n    },\n    watch: {\n      global: {\n        immediate: true,\n        handler(value) {\n          varMap.forEach((v) => {\n            const key = v.replace('$--', '').replace(/-/g, '_')\n            if (value[v]) {\n              this[key] = value[v]\n            } else {\n              this[key] = original[key]\n            }\n          });\n        }\n      }\n    },\n  }\n</script>\n\n## Typography 字体\n\n我们对字体进行统一规范，力求在各个操作系统下都有最佳展示效果。\n\n### 字体\n<div class=\"demo-term-box\">\n<img src=\"../../assets/images/term-pingfang.png\" alt=\"\">\n<img src=\"../../assets/images/term-hiragino.png\" alt=\"\">\n<img src=\"../../assets/images/term-microsoft.png\" alt=\"\">\n<img src=\"../../assets/images/term-sf.png\" alt=\"\">\n<img src=\"../../assets/images/term-helvetica.png\" alt=\"\">\n<img src=\"../../assets/images/term-arial.png\" alt=\"\">\n</div>\n\n### 字号\n\n<table class=\"demo-typo-size\">\n  <tbody>\n  <tr\n    >\n      <td>层级</td>\n      <td>字体大小</td>\n      <td class=\"color-dark-light\">举例</td>\n    </tr>\n    <tr\n    :style=\"{ fontSize: font_size_extra_small }\"\n    >\n      <td>辅助文字</td>\n      <td class=\"color-dark-light\">{{font_size_extra_small}} Extra Small</td>\n      <td>用 Element 快速搭建页面</td>\n    </tr>\n    <tr\n    :style=\"{ fontSize: font_size_small }\"\n    >\n      <td>正文（小）</td>\n      <td class=\"color-dark-light\">{{font_size_small}} Small</td>\n      <td>用 Element 快速搭建页面</td>\n    </tr>\n    <tr\n    :style=\"{ fontSize: font_size_base }\"\n    >\n      <td>正文</td>\n      <td class=\"color-dark-light\">{{font_size_base}} Base</td>\n      <td>用 Element 快速搭建页面</td>\n    </tr>\n    <tr\n    :style=\"{ fontSize: font_size_medium }\"\n    >\n      <td>小标题</td>\n      <td class=\"color-dark-light\">{{font_size_medium}} Medium</td>\n      <td>用 Element 快速搭建页面</td>\n    </tr>\n    <tr\n    :style=\"{ fontSize: font_size_large }\"\n    >\n      <td>标题</td>\n      <td class=\"color-dark-light\">{{font_size_large}} large</td>\n      <td>用 Element 快速搭建页面</td>\n    </tr>\n    <tr\n    :style=\"{ fontSize: font_size_extra_large }\"\n    >\n      <td>主标题</td>\n      <td class=\"color-dark-light\">{{font_size_extra_large}} Extra large</td>\n      <td>用 Element 快速搭建页面</td>\n    </tr>\n  </tbody>\n</table>\n\n### 行高\n\n<div>\n<img class=\"lineH-left\" src=\"~examples/assets/images/typography.png\" />\n<ul class=\"lineH-right\">\n<li>line-height:1 <span>无行高</span></li>\n<li>line-height:1.3 <span>紧凑</span></li>\n<li>line-height:1.5 <span>常规</span></li>\n<li>line-height:1.7 <span>宽松</span></li>\n</ul>\n</div>\n\n### Font-family 代码\n\n```css\nfont-family: \"Helvetica Neue\",Helvetica,\"PingFang SC\",\"Hiragino Sans GB\",\"Microsoft YaHei\",\"微软雅黑\",Arial,sans-serif;\n```\n","el-upload":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/upload](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/upload) \n      上传\n\n通过点击或者拖拽上传文件\n\n### 点击上传\n\n:::demo 通过 slot 你可以传入自定义的上传按钮类型和文字提示。可通过设置`limit`和`on-exceed`来限制上传文件的个数和定义超出限制时的行为。可通过设置`before-remove`来阻止文件移除操作。\n```html\n<el-upload\n  class=\"upload-demo\"\n  action=\"https://jsonplaceholder.typicode.com/posts/\"\n  :on-preview=\"handlePreview\"\n  :on-remove=\"handleRemove\"\n  :before-remove=\"beforeRemove\"\n  multiple\n  :limit=\"3\"\n  :on-exceed=\"handleExceed\"\n  :file-list=\"fileList\">\n  <el-button size=\"small\" type=\"primary\" icon=\"jc-icon-upload2\">点击上传</el-button>\n  <div slot=\"tip\" class=\"el-upload__tip\">只能上传jpg/png文件，且不超过500kb</div>\n</el-upload>\n<script>\n  export default {\n    data() {\n      return {\n        fileList: [{name: 'food.jpeg', url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'}, {name: 'food2.jpeg', url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'}]\n      };\n    },\n    methods: {\n      handleRemove(file, fileList) {\n        console.log(file, fileList);\n      },\n      handlePreview(file) {\n        console.log(file);\n      },\n      handleExceed(files, fileList) {\n        this.$message.warning(`当前限制选择 3 个文件，本次选择了 ${files.length} 个文件，共选择了 ${files.length + fileList.length} 个文件`);\n      },\n      beforeRemove(file, fileList) {\n        return this.$confirm(`确定移除 ${ file.name }？`);\n      }\n    }\n  }\n</script>\n```\n:::\n\n### 禁用点击上传\n\n:::demo 可通过设置`disabledTrigger` 禁用选择文件操作，同时文件列表可操作。\n```html\n<el-upload\n  class=\"upload-demo\"\n  action=\"https://jsonplaceholder.typicode.com/posts/\"\n  :on-preview=\"handlePreview\"\n  :on-remove=\"handleRemove\"\n  :before-remove=\"beforeRemove\"\n  multiple\n  :limit=\"limit\"\n  :disabledTrigger=\"disabledTrigger\" \n  :on-exceed=\"handleExceed\"\n  :on-change=\"handleChange\"\n  :file-list=\"fileList\">\n  <el-button :disabled=\"disabledTrigger\" size=\"small\" type=\"primary\" icon=\"jc-icon-upload2\">点击上传</el-button>\n  <div slot=\"tip\" class=\"el-upload__tip\">只能上传jpg/png文件，且不超过500kb</div>\n</el-upload>\n<script>\n  export default {\n    data() {\n      return {\n        disabledTrigger:true,\n        limit:2,\n        fileList: [{name: 'food.jpeg', url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'}, {name: 'food2.jpeg', url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'}]\n      };\n    },\n   \n    methods: {\n      handleRemove(file, fileList) {\n        this.disabledTrigger=fileList.length>=this.limit\n      },\n      handlePreview(file) {\n        console.log(file);\n      },\n      handleExceed(files, fileList) {\n        this.$message.warning(`当前限制选择 ${this.limit} 个文件，本次选择了 ${files.length} 个文件，共选择了 ${files.length + fileList.length} 个文件`);\n      },\n      beforeRemove(file, fileList) {\n        return this.$confirm(`确定移除 ${ file.name }？`);\n      },\n      handleChange(file, fileList)\n      {\n        this.disabledTrigger=fileList.length>=this.limit\n      }\n    }\n  }\n</script>\n```\n:::\n\n### 用户头像上传\n\n使用 `before-upload` 限制用户上传的图片格式和大小。\n\n:::demo\n```html\n<el-upload\n  class=\"avatar-uploader\"\n  action=\"https://jsonplaceholder.typicode.com/posts/\"\n  :show-file-list=\"false\"\n  :on-success=\"handleAvatarSuccess\"\n  :before-upload=\"beforeAvatarUpload\">\n  <img v-if=\"imageUrl\" :src=\"imageUrl\" class=\"avatar\">\n  <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\n</el-upload>\n\n<style>\n  .avatar-uploader .el-upload {\n    border: 1px dashed rgba(0,0,0,0.15);\n    border-radius: 2px;\n    cursor: pointer;\n    position: relative;\n    overflow: hidden;\n  }\n  .avatar-uploader .el-upload:hover {\n    border: 1px solid #2C68FF;\n  }\n  .avatar-uploader-icon {\n    font-size: 22px;\n    color: #2C68FF;\n    width: 126px;\n    height: 126px;\n    line-height: 126px;\n    text-align: center;\n  }\n  .avatar {\n    width: 126px;\n    height: 126px;\n    display: block;\n  }\n</style>\n\n<script>\n  export default {\n    data() {\n      return {\n        imageUrl: ''\n      };\n    },\n    methods: {\n      handleAvatarSuccess(res, file) {\n        this.imageUrl = URL.createObjectURL(file.raw);\n      },\n      beforeAvatarUpload(file) {\n        const isJPG = file.type === 'image/jpeg';\n        const isLt2M = file.size / 1024 / 1024 < 2;\n\n        if (!isJPG) {\n          this.$message.error('上传头像图片只能是 JPG 格式!');\n        }\n        if (!isLt2M) {\n          this.$message.error('上传头像图片大小不能超过 2MB!');\n        }\n        return isJPG && isLt2M;\n      }\n    }\n  }\n</script>\n```\n:::\n\n### 照片墙\n\n使用 `list-type` 属性来设置文件列表的样式。\n\n:::demo\n```html\n<el-upload\n  action=\"https://jsonplaceholder.typicode.com/posts/\"\n  list-type=\"picture-card\"\n  :on-preview=\"handlePictureCardPreview\"\n  :on-remove=\"handleRemove\">\n  <i class=\"el-icon-plus\"></i>\n</el-upload>\n<el-dialog :visible.sync=\"dialogVisible\">\n  <img width=\"100%\" :src=\"dialogImageUrl\" alt=\"\">\n</el-dialog>\n<script>\n  export default {\n    data() {\n      return {\n        dialogImageUrl: '',\n        dialogVisible: false\n      };\n    },\n    methods: {\n      handleRemove(file, fileList) {\n        console.log(file, fileList);\n      },\n      handlePictureCardPreview(file) {\n        this.dialogImageUrl = file.url;\n        this.dialogVisible = true;\n      }\n    }\n  }\n</script>\n```\n:::\n\n### 文件缩略图\n\n使用 `scoped-slot` 去设置缩略图模版。\n\n:::demo\n```html\n<el-upload\n  action=\"#\"\n  list-type=\"picture-card\"\n  :auto-upload=\"false\">\n    <i slot=\"default\" class=\"el-icon-plus\"></i>\n    <div slot=\"file\" slot-scope=\"{file}\">\n      <img\n        class=\"el-upload-list__item-thumbnail\"\n        :src=\"file.url\" alt=\"\"\n      >\n      <span class=\"el-upload-list__item-actions\">\n        <span\n          class=\"el-upload-list__item-preview\"\n          @click=\"handlePictureCardPreview(file)\"\n        >\n          <i class=\"el-icon-zoom-in\"></i>\n        </span>\n        <span\n          v-if=\"!disabled\"\n          class=\"el-upload-list__item-delete\"\n          @click=\"handleDownload(file)\"\n        >\n          <i class=\"el-icon-download\"></i>\n        </span>\n        <span\n          v-if=\"!disabled\"\n          class=\"el-upload-list__item-delete\"\n          @click=\"handleRemove(file)\"\n        >\n          <i class=\"el-icon-delete\"></i>\n        </span>\n      </span>\n    </div>\n</el-upload>\n<el-dialog :visible.sync=\"dialogVisible\">\n  <img width=\"100%\" :src=\"dialogImageUrl\" alt=\"\">\n</el-dialog>\n<script>\n  export default {\n    data() {\n      return {\n        dialogImageUrl: '',\n        dialogVisible: false,\n        disabled: false\n      };\n    },\n    methods: {\n      handleRemove(file) {\n        console.log(file);\n      },\n      handlePictureCardPreview(file) {\n        this.dialogImageUrl = file.url;\n        this.dialogVisible = true;\n      },\n      handleDownload(file) {\n        console.log(file);\n      }\n    }\n  }\n</script>\n```\n:::\n\n### 图片列表缩略图\n\n:::demo\n```html\n<el-upload\n  class=\"upload-demo\"\n  action=\"https://jsonplaceholder.typicode.com/posts/\"\n  :on-preview=\"handlePreview\"\n  :on-remove=\"handleRemove\"\n  :file-list=\"fileList\"\n  list-type=\"picture\">\n  <el-button size=\"small\" type=\"primary\" icon=\"jc-icon-upload2\">点击上传</el-button>\n  <div slot=\"tip\" class=\"el-upload__tip\">只能上传jpg/png文件，且不超过500kb</div>\n</el-upload>\n<script>\n  export default {\n    data() {\n      return {\n        fileList: [{name: 'food.jpeg', url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'}, {name: 'food2.jpeg', url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'}]\n      };\n    },\n    methods: {\n      handleRemove(file, fileList) {\n        console.log(file, fileList);\n      },\n      handlePreview(file) {\n        console.log(file);\n      }\n    }\n  }\n</script>\n```\n:::\n\n### 上传文件列表控制\n\n通过 `on-change` 钩子函数来对列表进行控制\n\n:::demo\n```html\n<el-upload\n  class=\"upload-demo\"\n  action=\"https://jsonplaceholder.typicode.com/posts/\"\n  :on-change=\"handleChange\"\n  :file-list=\"fileList\">\n  <el-button size=\"small\" type=\"primary\" icon=\"jc-icon-upload2\">点击上传</el-button>\n  <div slot=\"tip\" class=\"el-upload__tip\">只能上传jpg/png文件，且不超过500kb</div>\n</el-upload>\n<script>\n  export default {\n    data() {\n      return {\n        fileList: [{\n          name: 'food.jpeg',\n          url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'\n        }, {\n          name: 'food2.jpeg',\n          url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'\n        }]\n      };\n    },\n    methods: {\n      handleChange(file, fileList) {\n        this.fileList = fileList.slice(-3);\n      }\n    }\n  }\n</script>\n```\n:::\n\n### 拖拽上传\n\n:::demo\n```html\n<el-upload\n  class=\"upload-demo\"\n  drag\n  action=\"https://jsonplaceholder.typicode.com/posts/\"\n  multiple>\n  <i class=\"jc-icon-upload2\"></i>\n  <div class=\"el-upload__text\">将文件拖到此处，或<em>点击上传</em></div>\n  <div class=\"el-upload__tip\" slot=\"tip\">只能上传jpg/png文件，且不超过500kb</div>\n</el-upload>\n```\n:::\n\n### 手动上传\n\n:::demo\n```html\n<el-upload\n  class=\"upload-demo\"\n  ref=\"upload\"\n  action=\"https://jsonplaceholder.typicode.com/posts/\"\n  :on-preview=\"handlePreview\"\n  :on-remove=\"handleRemove\"\n  :file-list=\"fileList\"\n  :auto-upload=\"false\">\n  <el-button slot=\"trigger\" size=\"small\" type=\"primary\">选取文件</el-button>\n  <el-button style=\"margin-left: 10px;\" size=\"small\" type=\"success\" @click=\"submitUpload\">上传到服务器</el-button>\n  <div slot=\"tip\" class=\"el-upload__tip\">只能上传jpg/png文件，且不超过500kb</div>\n</el-upload>\n<script>\n  export default {\n    data() {\n      return {\n        fileList: [{name: 'food.jpeg', url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'}, {name: 'food2.jpeg', url: 'https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100'}]\n      };\n    },\n    methods: {\n      submitUpload() {\n        this.$refs.upload.submit();\n      },\n      handleRemove(file, fileList) {\n        console.log(file, fileList);\n      },\n      handlePreview(file) {\n        console.log(file);\n      }\n    }\n  }\n</script>\n```\n:::\n\n### Attribute\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\n|---------- |-------------- |---------- |--------------------------------  |-------- |\n| action | 必选参数，上传的地址 | string | — | — |\n| headers | 设置上传的请求头部 | object | — | — |\n| multiple | 是否支持多选文件 | boolean | — | — |\n| data | 上传时附带的额外参数 | object | — | — |\n| name | 上传的文件字段名 | string | — | file |\n| with-credentials | 支持发送 cookie 凭证信息 | boolean | — | false |\n| show-file-list | 是否显示已上传文件列表 | boolean | — | true |\n| drag | 是否启用拖拽上传 | boolean | — | false |\n| accept | 接受上传的[文件类型](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept)（thumbnail-mode 模式下此参数无效）| string | — | — |\n| on-preview | 点击文件列表中已上传的文件时的钩子 | function(file) | — | — |\n| on-remove | 文件列表移除文件时的钩子 | function(file, fileList) | — | — |\n| on-success | 文件上传成功时的钩子 | function(response, file, fileList) | — | — |\n| on-error | 文件上传失败时的钩子 | function(err, file, fileList) | — | — |\n| on-progress | 文件上传时的钩子 | function(event, file, fileList) | — | — |\n| on-change | 文件状态改变时的钩子，添加文件、上传成功和上传失败时都会被调用 | function(file, fileList) | — | — |\n| before-upload | 上传文件之前的钩子，参数为上传的文件，若返回 false 或者返回 Promise 且被 reject，则停止上传。 | function(file) | — | — |\n| before-remove | 删除文件之前的钩子，参数为上传的文件和文件列表，若返回 false 或者返回 Promise 且被 reject，则停止删除。| function(file, fileList) | — | — |\n| list-type | 文件列表的类型 | string | text/picture/picture-card | text |\n| auto-upload | 是否在选取文件后立即进行上传 | boolean | — | true |\n| file-list | 上传的文件列表, 例如: [{name: 'food.jpg', url: 'https://xxx.cdn.com/xxx.jpg'}] | array | — | [] |\n| http-request | 覆盖默认的上传行为，可以自定义上传的实现 | function | — | — |\n| disabled | 是否禁用 | boolean | — | false |\n| limit | 最大允许上传个数 |  number | — | — |\n| on-exceed | 文件超出个数限制时的钩子 | function(files, fileList) | — | - |\n| disabledTrigger | 是否禁用选择文件 | boolean | — | false |\n\n### Slot\n| name | 说明 |\n|------|--------|\n| trigger | 触发文件选择框的内容 |\n| tip | 提示说明文字 |\n\n### Methods\n| 方法名      | 说明          | 参数 |\n|----------- |-------------- | -- |\n| clearFiles | 清空已上传的文件列表（该方法不支持在 before-upload 中调用） | — |\n| abort      | 取消上传请求    | （ file: fileList 中的 file 对象 ） |\n| submit     | 手动上传文件列表 |  —                                |\n","el-z-index":"[jelement-next:https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/z-index](https://j.jdcloud.com/jelement-next/jelement-docs/dev/index.html#/zh-CN/component/z-index) \n     x 层叠顺序\n\n### 主题规范\n\n* 层级 `0-9` 常用于普通正文内的定位\n* 层级 `10-99` 常用于Affix固钉、Anchor锚点、BackTop回到顶部等组件定位\n* 层级 `100-999` 常用于页面头部导航、侧边栏菜单等组件定位\n* 层级 `1000-9999` 常用于Dialog对话框、Popover弹出框、Drawer抽屉、Message消息提示等组件定位\n\n### 注意事项\n\n:::tip\n定位元素（即其 position 属性值不是 static）除非必要，一般情况下避免使用z-index属性。\n:::\n\n### Ant Design 调研\n\n| 组件 | class | position | z-index |\n| --- | --- | --- | --- |\n| Affix 固钉 | .ant-affix | fixed | 10 |\n| Anchor 锚点 | .ant-affix | fixed | 10 |\n| BackTop 回到顶部 | .ant-back-top | fixed | 10 |\n| Header 头部布局 | .ant-layout-header.ant-pro-fixed-header | fixed | 100 |\n| Sider 侧边栏 | .ant-pro-sider.ant-layout-sider.ant-pro-sider-fixed | fixed | 100 |\n| Modal 对话框 | .ant-modal-mask | fixed | 1000 |\n| Modal 对话框 | .ant-modal-wrap | fixed | 1000 |\n| Drawer 抽屉 | .ant-drawer | fixed | 1000 |\n| Image 图片 | .ant-image-preview-mask | fixed | 1000 |\n| Image 图片 | .ant-image-preview-wrap | fixed | 1080 |\n| Message 全局提示 | .ant-message | fixed | 1010 |\n| Notification 通知提醒框 | .ant-notification | fixed | 1010 |\n| Popover 气泡卡片 | .ant-popover | absolute | 1030 |\n| Dropdown 下拉菜单 | .ant-dropdown | absolute | 1050 |\n| Select 选择器 | .ant-select-dropdown | absolute | 1050 |\n| DatePicker 日期选择框 | .ant-picker-dropdown | absolute | 1050 |\n| Tooltip 文字提示 | .ant-tooltip | absolute | 1070 |\n\n### ElementUI 调研\n\n| 组件 | class | position | z-index |\n| --- | --- | --- | --- |\n| Backtop 回到顶部 | .el-backtop | fixed | 5 |\n| Table 表格 | .el-table__fixed-body-wrapper | absolute | 3 |\n| Table 表格 | .el-table-filter | absolute (style) | 2000+ (style) |\n| Slider 滑块 | .el-slider__button-wrapper | absolute | 1001 |\n| Loading 加载 | .el-loading-mask | absolute | 2000 |\n| Loading 加载 | .el-loading-mask.is-fullscreen | fixed | 2000+ (style) |\n| Input 输入框 | .el-autocomplete-suggestion | absolute (style) | 2000+ (style) |\n| Select 选择器 | .el-select-dropdown | absolute (style) | 2000+ (style) |\n| Cascader 级联选择器 | .el-cascader__dropdown | absolute (style) | 2000+ (style) |\n| DatePicker 日期选择器 | .el-picker-panel | absolute (style) | 2000+ (style) |\n| ColorPicker 颜色选择器 | .el-color-picker__panel | absolute (style) | 2000+ (style) |\n| Message 消息提示 | .el-message | fexed | 2000+ (style) |\n| MessageBox 弹框 | .el-message-box__wrapper | fixed | 2000+ (style) |\n| MessageBox 弹框 | .v-modal | fixed | 2000+ (style) |\n| Notification 通知 | .el-notification | fixed | 2000+ (style) |\n| NavMenu 导航菜单 | .el-menu--horizontal | absolute (style) | 2000+ (style) |\n| NavMenu 导航菜单 | .el-tooltip__popper | absolute | 2000+ (style) |\n| Dropdown 下拉菜单 | .el-dropdown-menu | absolute | 2000+ (style) |\n| Dialog 对话框 | .el-dialog__wrapper | fixed | 2000+ (style) |\n| Tooltip 文字提示 | .el-tooltip__popper | absolute | 2000+ (style) |\n| Popover 弹出框 | .el-popover | absolute | 2000+ (style) |\n| Image 图片 | .el-image-viewer__wrapper | fixed | 2000+ (style) |\n| Drawer 抽屉 | .el-drawer__wrapper | fixed | 2000+ (style) |\n\nElementUI 大多数组件的z-index值采用JavaScript动态计算，默认起始值2000\n"}